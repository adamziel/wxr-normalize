<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress/6.6-beta2" created="2024-06-12 11:34" -->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>My WordPress Website</title>
<link>http://127.0.0.1:9400</link>
<description/>
<pubDate>Wed, 12 Jun 2024 11:34:29 +0000</pubDate>
<language>en-US</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://127.0.0.1:9400</wp:base_site_url>
<wp:base_blog_url>http://127.0.0.1:9400</wp:base_blog_url>
<wp:author>
  <wp:author_id>1</wp:author_id>
  <wp:author_login>admin</wp:author_login>
  <wp:author_email>admin@localhost.com</wp:author_email>
  <wp:author_display_name><![CDATA[admin]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<generator>https://wordpress.org/?v=6.6-beta2</generator>
<item>
  <title><![CDATA[15-resources.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=1</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Links and Resources</h1>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Frequently sought links</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><a href="https://playground.wordpress.net/">Demo</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://github.com/WordPress/wordpress-playground">Github Repository</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://wordpress.github.io/wordpress-playground/">Documentation</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://github.com/WordPress/playground-tools">Playground tools Repository</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Apps built with WordPress Playground</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><a href="https://playground.wordpress.net/">Official demo</a> and the <a href="https://developer.wordpress.org/playground">showcase</a> app – install a theme, try out a plugin, create a few pages, export what you've built</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://www.npmjs.com/package/%40wp-now/wp-now">wp-now</a> – a CLI tool for instant WordPress dev envs</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://marketplace.visualstudio.com/items?itemName=WordPressPlayground.wordpress-playground">WordPress Playground for VS Code</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Live Translations: <a href="https://translate.wordpress.org/projects/wp-plugins/friends/dev/pl/default/playground/">App</a>, <a href="https://make.wordpress.org/polyglots/2023/04/19/wp-translation-playground/">announcement</a>, <a href="https://make.wordpress.org/polyglots/2023/05/08/translate-live-updates-to-the-translation-playground/">more details</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://wordpress.org/plugins/interactive-code-block/">Interactive code block</a> which powers the <a href="https://adamadam.blog/2023/02/16/how-to-modify-html-in-a-php-wordpress-plugin-using-the-new-tag-processor-api/">HTML Tag Processor tutorial</a> and the <a href="https://adamadam.blog/2023/04/12/interactive-intro-to-wordpress-playground-public-api/">Playground JS API tutorial</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://playground.wordpress.net/gutenberg.html">Gutenberg Pull Request previewer</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://johnhooks.io/playground-experiment/">Notifications plugin live demo</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://www.wpgraphql.com/2023/06/15/announcing-the-wpgraphql-repl">GraphQL REPL</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://twitter.com/adamzielin/status/1669478239771799552">Blocknotes</a> – the first ever iOS app running WordPress on your phone</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://joost.blog/embedded-playground/">Playground embedder</a> to embed Playground examples in WordPress.org documentation using shortcodes</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://gist.github.com/adamziel/0fe3ffc1fb5202a907a87d055ee37135">Plugin demos on wp.org</a> – a user script that adds a "demo" tab to plugin pages on WordPress.org</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://playground.wordpress.net/wordpress.html">WordPress Pull Request previewer</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://playground.wordpress.net/demos/sync.html">Synchronization between two Playgrounds</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://playground.wordpress.net/demos/time-traveling.html">Time Travel</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://playground.wordpress.net/demos/wp-cli.html">WP-CLI</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://playground.wordpress.net/demos/php-blueprints.html">PHP implementation of Blueprints</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Reading materials</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><a href="https://web.dev/wordpress-playground/">Build in-browser WordPress experiences with WordPress Playground and WebAssembly</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://developer.wordpress.org/playground">WordPress Playground on developer.wordpress.org</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://make.wordpress.org/core/2023/04/13/in-browser-wordpress-tech-demos-wordpress-development-with-wordpress-playground/">In-Browser WordPress Tech Demos: WordPress Development with WordPress Playground</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://make.wordpress.org/core/2022/09/23/client-side-webassembly-wordpress-with-no-server/">Initial announcement on make.wordpress.org</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://news.ycombinator.com/item?id=32960560">Hackernews discussion</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Videos</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Developer Hours Videos: <a href="https://wordpress.tv/2023/05/23/developer-hours-wordpress-playground-americas/">Americas Region (May 23,2023)</a>, <a href="https://wordpress.tv/2023/05/24/developer-hours-wordpress-playground-apac-emea/">APAC/EMEA Region (May 24,2023)</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://youtu.be/VeigCZuxnfY?t=2912">Playground at State of the Word</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://www.youtube.com/watch?v=e-CwouzTGp4&amp;t=26946s">Playground at WCEU 2023</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://www.youtube.com/watch?v=AUHklF9GdL8&amp;list=PLiCne9CeL82_hGuJOAJlsc84WxVDSH-c9&amp;index=4">Playground at WordCamp Gliwice (in polish)</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://www.youtube.com/watch?v=dN_LaenY8bI">Watch "WordPress Playground: the ultimate learning, testing, &amp; teaching tool for WordPress"</a> by Anne McCarthy</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[17-changelog.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=2</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Changelog</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>All notable changes to this project are documented in this file by a CI job<br>that runs on every NPM release. The file follows the <a href="https://keepachangelog.com/en/1.1.0/">Keep a Changelog</a><br>format.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.7.20] (2024-05-21)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading"><strong>Breaking Changes</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>[Breaking] Refactor PHP.ini management, remove php.setPhpIniPath() and php.setPhpIniEntry(). (<a href="https://github.com/WordPress/wordpress-playground/pull/1423">#1423</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Enhancements</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>CLI: Distinguish between mount and mountBeforeInstall options. (<a href="https://github.com/WordPress/wordpress-playground/pull/1410">#1410</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>CLI: Support fetching WordPress zips from custom URLs. (<a href="https://github.com/WordPress/wordpress-playground/pull/1415">#1415</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Introduce a new @wp-playground/common package to avoid circular depencies. (<a href="https://github.com/WordPress/wordpress-playground/pull/1387">#1387</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Website: Ship the SQLite database integration plugin. (<a href="https://github.com/WordPress/wordpress-playground/pull/1418">#1418</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Boot Flow</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Playground CLI: Don't create /wordpress/wp-config.php on boot. (<a href="https://github.com/WordPress/wordpress-playground/pull/1407">#1407</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Blueprints</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Define constants in auto_prepend_file, silence warnings related to redefining those constants. (<a href="https://github.com/WordPress/wordpress-playground/pull/1400">#1400</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Detect silent failures when activating plugins and theme. (<a href="https://github.com/WordPress/wordpress-playground/pull/1436">#1436</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Re-activate single-file plugins when enabling a multisite. (<a href="https://github.com/WordPress/wordpress-playground/pull/1435">#1435</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Throw an error when activating a theme or plugin that doesn't exist. (<a href="https://github.com/WordPress/wordpress-playground/pull/1391">#1391</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Write sunrise.php to /internal in enableMultisite step. (<a href="https://github.com/WordPress/wordpress-playground/pull/1401">#1401</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Tools</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add VSCode branch protection. (<a href="https://github.com/WordPress/wordpress-playground/pull/1408">#1408</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Show error log if Playground fails to start. (<a href="https://github.com/WordPress/wordpress-playground/pull/1336">#1336</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Blueprints</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Unzip: Only delete a temporary zip file after unzipping, do not delete the original zip. (<a href="https://github.com/WordPress/wordpress-playground/pull/1412">#1412</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">GitHub integration</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>GitHub export: Create new commits in your fork when writing to the upstream repo isn't allowed. (<a href="https://github.com/WordPress/wordpress-playground/pull/1392">#1392</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Import/Export</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Support wp_crop_image in import wxr. (<a href="https://github.com/WordPress/wordpress-playground/pull/1357">#1357</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Devrel</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add puzzle API. (<a href="https://github.com/WordPress/wordpress-playground/pull/1372">#1372</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Documentation</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Docs: Use step function names instead of TypeScript type names. (<a href="https://github.com/WordPress/wordpress-playground/pull/1373">#1373</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Updated the GitHub issue link to open in a new tab. (<a href="https://github.com/WordPress/wordpress-playground/pull/1353">#1353</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Use step id name. (<a href="https://github.com/WordPress/wordpress-playground/pull/1377">#1377</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Experiments</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Explore: Setup SQLite database integration without creating wp-content/db.php. (<a href="https://github.com/WordPress/wordpress-playground/pull/1382">#1382</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add shareable extension-to-MIME-type mapping. (<a href="https://github.com/WordPress/wordpress-playground/pull/1355">#1355</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Document php ini functions. (<a href="https://github.com/WordPress/wordpress-playground/pull/1430">#1430</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>JSPI: Enable the origin trial on Chrome. (<a href="https://github.com/WordPress/wordpress-playground/pull/1346">#1346</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Add libjpeg and libwebp support. (<a href="https://github.com/WordPress/wordpress-playground/pull/1393">#1393</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Always set the auto_prepend_file php.ini entry, even when the auto_prepend_file.php file exists. (<a href="https://github.com/WordPress/wordpress-playground/pull/1388">#1388</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Move internal shared directories to /internal/shared. (<a href="https://github.com/WordPress/wordpress-playground/pull/1386">#1386</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Remove mentions of a custom PHP extension. (<a href="https://github.com/WordPress/wordpress-playground/pull/1422">#1422</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Remove the MODE_EVAL_CODE execution mode. (<a href="https://github.com/WordPress/wordpress-playground/pull/1433">#1433</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Support php.mv() between devices via recursive copy. (<a href="https://github.com/WordPress/wordpress-playground/pull/1411">#1411</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Use /internal/shared/php.ini by default. (<a href="https://github.com/WordPress/wordpress-playground/pull/1419">#1419</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Use auto_prepend_file to preload mu-plugins (instead of creating them in wp-content/mu-plugins). (<a href="https://github.com/WordPress/wordpress-playground/pull/1366">#1366</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Improve log modal styles, a11y, error message wording. (<a href="https://github.com/WordPress/wordpress-playground/pull/1369">#1369</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Move puzzle app to a Playground package. (<a href="https://github.com/WordPress/wordpress-playground/pull/1385">#1385</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Add secrets on-demand for more endpoints. (<a href="https://github.com/WordPress/wordpress-playground/pull/1362">#1362</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Boot: Move WordPress zip extraction logic to a common unzipWordPress() utility. (<a href="https://github.com/WordPress/wordpress-playground/pull/1427">#1427</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Derive MIME types for PHP served files from shared JSON. (<a href="https://github.com/WordPress/wordpress-playground/pull/1360">#1360</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fix constant names for GH export oauth. (<a href="https://github.com/WordPress/wordpress-playground/pull/1378">#1378</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Playground Boot: Align the boot process between remote.html and CLI. (<a href="https://github.com/WordPress/wordpress-playground/pull/1389">#1389</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Remote.html: Install WordPress if it isn't installed yet. (<a href="https://github.com/WordPress/wordpress-playground/pull/1425">#1425</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Remote.html: Preload the SQLite database plugin, but only execute it if there's no custom db.php inside wp-content. (<a href="https://github.com/WordPress/wordpress-playground/pull/1424">#1424</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Simplify website deployment workflows. (<a href="https://github.com/WordPress/wordpress-playground/pull/1404">#1404</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Update rsync command to clean up more completely. (<a href="https://github.com/WordPress/wordpress-playground/pull/1361">#1361</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Blueprints</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Provide non-gzipped wp-cli.phar file with website build. (<a href="https://github.com/WordPress/wordpress-playground/pull/1406">#1406</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Simplify runPhpWithZipFunctions() setup. (<a href="https://github.com/WordPress/wordpress-playground/pull/1434">#1434</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Internal</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Fix changelog automation. (<a href="https://github.com/WordPress/wordpress-playground/pull/1413">#1413</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Bug Fixes</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add name to Puzzle package. (<a href="https://github.com/WordPress/wordpress-playground/pull/1443">#1443</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fixed images not loading on the page. (<a href="https://github.com/WordPress/wordpress-playground/pull/1352">#1352</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Restore nightly wordpress build. (<a href="https://github.com/WordPress/wordpress-playground/pull/1437">#1437</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Reliability</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Disable console logging when running tests. (<a href="https://github.com/WordPress/wordpress-playground/pull/1368">#1368</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading"></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Lint: Disable console warnings for paths where they're not useful. (<a href="https://github.com/WordPress/wordpress-playground/pull/1421">#1421</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Various</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add links to kitchen sink (PHP extensions), networking. (<a href="https://github.com/WordPress/wordpress-playground/pull/1363">#1363</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Reorganize and update documentation. (<a href="https://github.com/WordPress/wordpress-playground/pull/1354">#1354</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @bgrgicak @brandonpayton @flexseth @ironnysh @josevarghese</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.7.15] (2024-04-30)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Avoid edge-caching conditionally redirected resources. (<a href="https://github.com/WordPress/wordpress-playground/pull/1351">#1351</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fix deploy-time check for file with PHP-handled redirect. (<a href="https://github.com/WordPress/wordpress-playground/pull/1350">#1350</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@brandonpayton</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.7.10] (2024-04-30)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>PHP.wasm Node: Revert a part of #1289, do not import a .wasm file. (<a href="https://github.com/WordPress/wordpress-playground/pull/1348">#1348</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.7.5] (2024-04-30)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Internal</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Meta: Move the minified WordPress to the new <code>@wp-playground/wordpress-builds</code> package. (<a href="https://github.com/WordPress/wordpress-playground/pull/1343">#1343</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.7.3] (2024-04-29)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Playground CLI. (<a href="https://github.com/WordPress/wordpress-playground/pull/1289">#1289</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.7.2] (2024-04-29)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading"><strong>Breaking Changes</strong></h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>PHP: Remove setSapiName, setPhpIniEntry, setPhpIniPath methods from the remote PHP API client. (<a href="https://github.com/WordPress/wordpress-playground/pull/1321">#1321</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Remove the wp-playground/node package. (<a href="https://github.com/WordPress/wordpress-playground/pull/1323">#1323</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">PHP WebAssembly</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Breaking: Loopback Request Support. (<a href="https://github.com/WordPress/wordpress-playground/pull/1287">#1287</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Tools</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Centralize log storage. (<a href="https://github.com/WordPress/wordpress-playground/pull/1315">#1315</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Documentation</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Link to Installing Nx Globally in the README. (<a href="https://github.com/WordPress/wordpress-playground/pull/1325">#1325</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add PHPResponse.forHttpCode() shorthand. (<a href="https://github.com/WordPress/wordpress-playground/pull/1322">#1322</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Asyncify: List ZEND_FETCH_OBJ_R_SPEC_CV_CV_HANDLER. (<a href="https://github.com/WordPress/wordpress-playground/pull/1342">#1342</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Curl extension for the Node.js build of PHP.wasm. (<a href="https://github.com/WordPress/wordpress-playground/pull/1273">#1273</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Explore curl support. (<a href="https://github.com/WordPress/wordpress-playground/pull/1133">#1133</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP Process Manager. (<a href="https://github.com/WordPress/wordpress-playground/pull/1301">#1301</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHPProcessManager: Clear nextInstance when the concurrency limit is exhausted. (<a href="https://github.com/WordPress/wordpress-playground/pull/1324">#1324</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Spawn handler: Wrap the program call with try/catch, exit gracefully on error. (<a href="https://github.com/WordPress/wordpress-playground/pull/1320">#1320</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add initial workflow for deploying the website to WP Cloud. (<a href="https://github.com/WordPress/wordpress-playground/pull/1293">#1293</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Eliminate 404s due to nested files-to-serve-via-php dir. (<a href="https://github.com/WordPress/wordpress-playground/pull/1333">#1333</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Stop WP rewrite rules from matching files like wp-admin.css. (<a href="https://github.com/WordPress/wordpress-playground/pull/1317">#1317</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Stop using PHP to serve most static files on WP Cloud. (<a href="https://github.com/WordPress/wordpress-playground/pull/1331">#1331</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>WP Cloud: Relay secrets for error logger. (<a href="https://github.com/WordPress/wordpress-playground/pull/1337">#1337</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Documentation</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Document WP Cloud website setup. (<a href="https://github.com/WordPress/wordpress-playground/pull/1338">#1338</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Reliability</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add log methods, log handlers, and separate log collection. (<a href="https://github.com/WordPress/wordpress-playground/pull/1264">#1264</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @bgrgicak @brandonpayton @juanmaguitar @mho22</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.7.1] (2024-04-24)</h2>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.7.0] (2024-04-24)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading"><strong>Breaking Changes</strong></h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">PHP WebAssembly</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Breaking: Remove PHPBrowser. (<a href="https://github.com/WordPress/wordpress-playground/pull/1302">#1302</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Enhancements</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Bump TypeScript to 5.4.5. (<a href="https://github.com/WordPress/wordpress-playground/pull/1299">#1299</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Semaphore: Add timeout option. (<a href="https://github.com/WordPress/wordpress-playground/pull/1300">#1300</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Blueprints</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Builder: Fix stuck loader bar. (<a href="https://github.com/WordPress/wordpress-playground/pull/1284">#1284</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Remove setPhpIniEntry step. (<a href="https://github.com/WordPress/wordpress-playground/pull/1288">#1288</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Tools</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">GitHub integration</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>GitHub: Don't delete all the files when exporting a theme. (<a href="https://github.com/WordPress/wordpress-playground/pull/1308">#1308</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Urlencode branch name. (<a href="https://github.com/WordPress/wordpress-playground/pull/1275">#1275</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Blueprints</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Blueprints builder: Support ?blueprint-url. (<a href="https://github.com/WordPress/wordpress-playground/pull/1309">#1309</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Documentation</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Use new learning resources in Playground documentation. (<a href="https://github.com/WordPress/wordpress-playground/pull/1276">#1276</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Browser: Remove setSpawnHandler function from the public API. (<a href="https://github.com/WordPress/wordpress-playground/pull/1303">#1303</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Add a cwd argument to hotSwapPHPRuntime(). (<a href="https://github.com/WordPress/wordpress-playground/pull/1304">#1304</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Remove addServerGlobalEntry() method, accept $_SERVER as php.run() property. (<a href="https://github.com/WordPress/wordpress-playground/pull/1286">#1286</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHPRequestHandler: Add a generic PHP argument. (<a href="https://github.com/WordPress/wordpress-playground/pull/1310">#1310</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>nit: Clean up after node PHP popen() test. (<a href="https://github.com/WordPress/wordpress-playground/pull/1280">#1280</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add more info to crash reports. (<a href="https://github.com/WordPress/wordpress-playground/pull/1253">#1253</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Memoize fetch() responses when requesting php.wasm. (<a href="https://github.com/WordPress/wordpress-playground/pull/1306">#1306</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Progress monitoring: Use a custom instantiateWasm handler to avoid monkey-patching WebAssembly.instantiateStreaming. (<a href="https://github.com/WordPress/wordpress-playground/pull/1305">#1305</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Remove sandbox attribute from iframe. (<a href="https://github.com/WordPress/wordpress-playground/pull/1313">#1313</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Service Worker: Fetch credentialless to play more nicely with server caches (#1311). (<a href="https://github.com/WordPress/wordpress-playground/pull/1311">#1311</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Internal</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Automate Changelog generation after each npm release. (<a href="https://github.com/WordPress/wordpress-playground/pull/1312">#1312</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>CI: Fix intermittent documentation build failures. (<a href="https://github.com/WordPress/wordpress-playground/pull/1307">#1307</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Bug Fixes</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add styles to ensure <code>iframes</code> are responsive. (<a href="https://github.com/WordPress/wordpress-playground/pull/1267">#1267</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Docs: Fix the Blueprint example of the Gutenberg PR preview. (<a href="https://github.com/WordPress/wordpress-playground/pull/1268">#1268</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Docs: Move Steps Shorthands to a separate page to fix Steps TOC. (<a href="https://github.com/WordPress/wordpress-playground/pull/1265">#1265</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Reliability</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add network error message. (<a href="https://github.com/WordPress/wordpress-playground/pull/1281">#1281</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Explore logging to a file. (<a href="https://github.com/WordPress/wordpress-playground/pull/1292">#1292</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Various</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add PDF to infer mime type list. (<a href="https://github.com/WordPress/wordpress-playground/pull/1298">#1298</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @bgrgicak @brandonpayton @ironnysh @peeranat-dan</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.16] (2024-04-17)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Blueprints</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Replace set_current_user call with wp_set_current_user to fix a PHP notice. (<a href="https://github.com/WordPress/playground/pull/1262">#1262</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Tools</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Install themes and plugins using the ReadableStream API. (<a href="https://github.com/WordPress/playground/pull/919">#919</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Documentation</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Docs: Update WordPress versions used in the documentation, document using older releases. (<a href="https://github.com/WordPress/playground/pull/1235">#1235</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Filter Requests library to use the Fetch handler. (<a href="https://github.com/WordPress/playground/pull/1048">#1048</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Handle request errors in PHPRequestHandler, return response code 500. (<a href="https://github.com/WordPress/playground/pull/1249">#1249</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Reset exit code before dispatching a request. (<a href="https://github.com/WordPress/playground/pull/1251">#1251</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Various</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add documentation for <code>shorthand</code> alternatives of Blueprint steps. (<a href="https://github.com/WordPress/playground/pull/1261">#1261</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @dd32 @ironnysh @kozer</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.15] (2024-04-16)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Blueprints</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add ifAlreadyInstalled to installPlugin and installTheme steps. (<a href="https://github.com/WordPress/playground/pull/1244">#1244</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Support a landingPage value without the initial slash. (<a href="https://github.com/WordPress/playground/pull/1227">#1227</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Investigate OOB: Run unit tests with instrumented PHP 8.0 code. (<a href="https://github.com/WordPress/playground/pull/1220">#1220</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Unit tests: Restore site-data.spec.ts. (<a href="https://github.com/WordPress/playground/pull/1194">#1194</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Web PHP: Increase memory limit to 256 M. (<a href="https://github.com/WordPress/playground/pull/1232">#1232</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Browser: Display PHP output when Fatal Error is trigerred. (<a href="https://github.com/WordPress/playground/pull/1234">#1234</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fix accessibility issues found by Axe. (<a href="https://github.com/WordPress/playground/pull/1246">#1246</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Request Handler: Urldecode the requested path. (<a href="https://github.com/WordPress/playground/pull/1228">#1228</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Bug Fixes</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>fix: Set required engine version to 18.18.0. (<a href="https://github.com/WordPress/playground/pull/1214">#1214</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Various</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Blueprints/json example. (<a href="https://github.com/WordPress/playground/pull/1188">#1188</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Doc: Update 01-index.md. (<a href="https://github.com/WordPress/playground/pull/1216">#1216</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Move DefineSiteUrlStep doc warning so it displays in documentation. (<a href="https://github.com/WordPress/playground/pull/1245">#1245</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Updated link to native WordPress importer. (<a href="https://github.com/WordPress/playground/pull/1243">#1243</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>documentation update proposal: Provide more info on features, extensions?. (<a href="https://github.com/WordPress/playground/pull/1208">#1208</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>php-wasm/node: Update express to newest version, and move it to devDependencies. (<a href="https://github.com/WordPress/playground/pull/1218">#1218</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @artpi @bph @brandonpayton @eliot-akira @flexseth @ironnysh @kirjavascript</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.14] (2024-04-11)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Bug Fixes</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Revert changes to the documentation build. (<a href="https://github.com/WordPress/playground/pull/1226">#1226</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Reliability</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Update error modal description label. (<a href="https://github.com/WordPress/playground/pull/1224">#1224</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Various</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Try memory leak workaround with zeroed mem. (<a href="https://github.com/WordPress/playground/pull/1229">#1229</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @bgrgicak @brandonpayton</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.13] (2024-04-10)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Try to repro memory out of bounds errors in CI. (<a href="https://github.com/WordPress/playground/pull/1199">#1199</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Bug Fixes</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Fix docs-site build. (<a href="https://github.com/WordPress/playground/pull/1222">#1222</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@bgrgicak @brandonpayton</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.11] (2024-04-09)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Tools</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Avoid Service Worker update issues on localhost. (<a href="https://github.com/WordPress/playground/pull/1209">#1209</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Import/Export</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>importWxr: Preserve backslashes in the imported content. (<a href="https://github.com/WordPress/playground/pull/1213">#1213</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Catch DNS errors to avoid unhandled exceptions. (<a href="https://github.com/WordPress/playground/pull/1215">#1215</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Revert "Avoid partial munmap memory leak". (<a href="https://github.com/WordPress/playground/pull/1195">#1195</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Try to repro memory out of bounds errors in CI. (<a href="https://github.com/WordPress/playground/pull/1198">#1198</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Various</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Adjust link to LICENSE file. (<a href="https://github.com/WordPress/playground/pull/1210">#1210</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Try to reproduce the memory access error with files from 096a017. (<a href="https://github.com/WordPress/playground/pull/1212">#1212</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @brandonpayton @emmanuel-ferdman @fluiddot</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.10] (2024-04-04)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Blueprints</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Rename importFile to importWxr, switch to humanmade/WordPress importer. (<a href="https://github.com/WordPress/playground/pull/1192">#1192</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Tools</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Blueprints</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Explorations: Stream API. (<a href="https://github.com/WordPress/playground/pull/851">#851</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Avoid partial munmap memory leak. (<a href="https://github.com/WordPress/playground/pull/1189">#1189</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Make kitchen sink extension bundle the default. (<a href="https://github.com/WordPress/playground/pull/1191">#1191</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Bug Fixes</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Fix cross-device mv by switching to copy. (<a href="https://github.com/WordPress/playground/pull/846">#846</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @brandonpayton @seanmorris</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.9] (2024-04-03)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Tools</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Devex: Expose window.playground for quick testing and debugging. (<a href="https://github.com/WordPress/playground/pull/1125">#1125</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">GitHub integration</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Website: Query API options to preconfigure the GitHub export form. (<a href="https://github.com/WordPress/playground/pull/1174">#1174</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Documentation</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Update the wp-cli step code example. (<a href="https://github.com/WordPress/playground/pull/1140">#1140</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add PHP iterator and yield support. (<a href="https://github.com/WordPress/playground/pull/1181">#1181</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fix fileinfo support. (<a href="https://github.com/WordPress/playground/pull/1179">#1179</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fix mbregex support. (<a href="https://github.com/WordPress/playground/pull/1155">#1155</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP.run(): Throw JS exception on runtime error, remove throwOnError flag. (<a href="https://github.com/WordPress/playground/pull/1137">#1137</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add error report modal. (<a href="https://github.com/WordPress/playground/pull/1102">#1102</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Ensure PromiseRejectionEvent has reason before logging it. (<a href="https://github.com/WordPress/playground/pull/1150">#1150</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Request handler: Remove everything after # from the URL. (<a href="https://github.com/WordPress/playground/pull/1126">#1126</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Web: Make the "Apply changes" button work in Playground settings form. (<a href="https://github.com/WordPress/playground/pull/1122">#1122</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Plugin proxy</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Allow requests to WordPress.org. (<a href="https://github.com/WordPress/playground/pull/1154">#1154</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Internal</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Refresh WordPress with the latest SQLite integration plugin. (<a href="https://github.com/WordPress/playground/pull/1151">#1151</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Bug Fixes</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Fix typo in blueprints/public/schema-readme.md. (<a href="https://github.com/WordPress/playground/pull/1134">#1134</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Priority: Fix broken link to VS Code extension. (<a href="https://github.com/WordPress/playground/pull/1141">#1141</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Various</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Docs/update - Add implied step. (<a href="https://github.com/WordPress/playground/pull/1144">#1144</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Give brandonpayton permission to run Playground GH workflows. (<a href="https://github.com/WordPress/playground/pull/1139">#1139</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Logger API: Add rate limiting. (<a href="https://github.com/WordPress/playground/pull/1142">#1142</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Remove <code>--disable-all</code> configuration option in PHP compile process. (<a href="https://github.com/WordPress/playground/pull/1132">#1132</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @bgrgicak @brandonpayton @flexseth @jblz @mho22</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.8] (2024-03-21)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Blueprints</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Allow optional metadata. (<a href="https://github.com/WordPress/playground/pull/1103">#1103</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Tools</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add VSCode Chrome debugging support. (<a href="https://github.com/WordPress/playground/pull/1088">#1088</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Website: Support Base64-encoding Blueprints passed in the URL. (<a href="https://github.com/WordPress/playground/pull/1091">#1091</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Documentation</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Docs: Expand Details section. (<a href="https://github.com/WordPress/playground/pull/1109">#1109</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Update activate-theme.ts to use <code>themeFolderName</code>. (<a href="https://github.com/WordPress/playground/pull/1119">#1119</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Blueprints: Explore switching to the PHP implementation. (<a href="https://github.com/WordPress/playground/pull/1051">#1051</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Explore weird register_shutdown_function behavior. (<a href="https://github.com/WordPress/playground/pull/1099">#1099</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fix post_message_to_js memory out of bounds. (<a href="https://github.com/WordPress/playground/pull/1114">#1114</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fix shutdown errors. (<a href="https://github.com/WordPress/playground/pull/1104">#1104</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fixing build regression [BISON COMPILE]. (<a href="https://github.com/WordPress/playground/pull/871">#871</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP : Set appropriate SCRIPT variables in $_SERVER superglobal. (<a href="https://github.com/WordPress/playground/pull/1092">#1092</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add logger API. (<a href="https://github.com/WordPress/playground/pull/1113">#1113</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Add multisite rewrite rules. (<a href="https://github.com/WordPress/playground/pull/1083">#1083</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Service worker: Improve error reporting in non-secure contexts. (<a href="https://github.com/WordPress/playground/pull/1098">#1098</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Bug Fixes</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Fix experimental notice in FF ESR. (<a href="https://github.com/WordPress/playground/pull/1117">#1117</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fix php bison dep for building on non-arm64 architectures. (<a href="https://github.com/WordPress/playground/pull/1115">#1115</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Reliability</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add fatal errror listener. (<a href="https://github.com/WordPress/playground/pull/1095">#1095</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Various</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Update examples and demos in the documentation. (<a href="https://github.com/WordPress/playground/pull/1107">#1107</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@0aveRyan @adamziel @bgrgicak @brandonpayton @ironnysh @mho22 @seanmorris @StevenDufresne</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.7] (2024-03-06)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Node polyfills: Only apply them in Node.js, not in web browsers. (<a href="https://github.com/WordPress/playground/pull/1089">#1089</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.6] (2024-03-06)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Comlink API: Pass the context argument to windowEndpoint, not wrap. (<a href="https://github.com/WordPress/playground/pull/1087">#1087</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fix: Playground not starting due to a race condition. (<a href="https://github.com/WordPress/playground/pull/1084">#1084</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Hide the "This is experimental WordPress" notice on click. (<a href="https://github.com/WordPress/playground/pull/1082">#1082</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Set the API context when using Comlink.wrap(). (<a href="https://github.com/WordPress/playground/pull/1085">#1085</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.5] (2024-03-05)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Tools</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Plugin proxy</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add Sensei to the allowed repositories for plugin proxy. (<a href="https://github.com/WordPress/playground/pull/1079">#1079</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Blueprints</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Snapshot Import Protocol v1. (<a href="https://github.com/WordPress/playground/pull/1007">#1007</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Internal</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Build the php-wasm/util package as both ESM and CJS. (<a href="https://github.com/WordPress/playground/pull/1081">#1081</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Reliability</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Blueprints</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add unit tests to the mkdir step. (<a href="https://github.com/WordPress/playground/pull/1029">#1029</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Various</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Website query API: Continue plugin installs on error. (<a href="https://github.com/WordPress/playground/pull/605">#605</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @eliot-akira @reimic @renatho</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.4] (2024-03-04)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Enhancements</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add logging support to Playground. (<a href="https://github.com/WordPress/playground/pull/1035">#1035</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Blueprints</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>PHP Blueprints: Display progress. (<a href="https://github.com/WordPress/playground/pull/1077">#1077</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Set progress caption and communicate failures in the import file step. (<a href="https://github.com/WordPress/playground/pull/1034">#1034</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Tools</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Blueprints</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>PHP Blueprints demo page. (<a href="https://github.com/WordPress/playground/pull/1070">#1070</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Do not prepend a whitespace when encoding body as multipart form data. (<a href="https://github.com/WordPress/playground/pull/1033">#1033</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Fix response header escaping. (<a href="https://github.com/WordPress/playground/pull/1050">#1050</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fix: Networking broken when extra PHP extensions are enabled. (<a href="https://github.com/WordPress/playground/pull/1045">#1045</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP.wasm: Yield 0 bytes read on fd_read failure to improve PHP's fread() and feof() behavior. (<a href="https://github.com/WordPress/playground/pull/1053">#1053</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Support $env and $cwd proc_open arguments. (<a href="https://github.com/WordPress/playground/pull/1064">#1064</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Parse shell commands in createSpawnHandler. (<a href="https://github.com/WordPress/playground/pull/1065">#1065</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Prototype: Spawning PHP sub-processes in Web Workers. (<a href="https://github.com/WordPress/playground/pull/1031">#1031</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Spawning PHP sub-processes in Web Workers. (<a href="https://github.com/WordPress/playground/pull/1069">#1069</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add Google Analytics events to Playground. (<a href="https://github.com/WordPress/playground/pull/1040">#1040</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fix error on reload site click. (<a href="https://github.com/WordPress/playground/pull/1041">#1041</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Internal</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Rebuild WordPress every 20 minutes, short-circuit if no new version is found. (<a href="https://github.com/WordPress/playground/pull/1061">#1061</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Rebuild WordPress within an hour of a beta release. (<a href="https://github.com/WordPress/playground/pull/1059">#1059</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Bug Fixes</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Fix the login message so it doesn't override another. (<a href="https://github.com/WordPress/playground/pull/1044">#1044</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Various</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add arguments to default node spawn method. (<a href="https://github.com/WordPress/playground/pull/1037">#1037</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Add bgrgicak to deployment allowlists. (<a href="https://github.com/WordPress/playground/pull/1057">#1057</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Allow for CORS requests to api.wordpress.org to pass. (<a href="https://github.com/WordPress/playground/pull/1009">#1009</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Default URL rewrites to /index.php. (<a href="https://github.com/WordPress/playground/pull/1072">#1072</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Remove repository specific Code of Conduct. (<a href="https://github.com/WordPress/playground/pull/1038">#1038</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Ship WordPress 6.5 beta 1. (<a href="https://github.com/WordPress/playground/pull/1036">#1036</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @bgrgicak @dd32 @desrosj @johnbillion @mho22</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.3] (2024-02-12)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Blueprints</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Wp-cli step. (<a href="https://github.com/WordPress/playground/pull/1017">#1017</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Calls proc_open two times in a row. (<a href="https://github.com/WordPress/playground/pull/1012">#1012</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Experiment: Build PHP with OPFS support. (<a href="https://github.com/WordPress/playground/pull/1030">#1030</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP: Pass request body as UInt8Array. (<a href="https://github.com/WordPress/playground/pull/1018">#1018</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @mho22</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.2] (2024-02-08)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Networking: Swap Requests transports using the http_api_transports instead of patching the Requests library. (<a href="https://github.com/WordPress/playground/pull/1004">#1004</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Remove <code>crypto.randomUUID</code> dependency in favor of a custom function. (<a href="https://github.com/WordPress/playground/pull/1016">#1016</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Remove x-request-issuer header on cross-origin requests. (<a href="https://github.com/WordPress/playground/pull/1010">#1010</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Update wp_http_fetch.php. (<a href="https://github.com/WordPress/playground/pull/1002">#1002</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Remote.html: Always install the playground mu-plugin. (<a href="https://github.com/WordPress/playground/pull/1005">#1005</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Various</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>32bit integer workaround. (<a href="https://github.com/WordPress/playground/pull/1014">#1014</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Test/hello world blueprint. (<a href="https://github.com/WordPress/playground/pull/908">#908</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @bgrgicak @jdevalk @sejas @stoph</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.1] (2024-02-05)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Blueprints</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Remove the applyWordPressPatches step, enable the Site Health Plugin. (<a href="https://github.com/WordPress/playground/pull/1001">#1001</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Various</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add <code>crypto</code> to Polyfills improving Blueprint compatibility for Node. (<a href="https://github.com/WordPress/playground/pull/1000">#1000</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @sejas</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.6.0] (2024-02-05)</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Enhancements</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add wp-cli and code editor examples to the demos page. (<a href="https://github.com/WordPress/playground/pull/965">#965</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>WordPress: Preserve PHP attributes and wp-config.php whitespace. (<a href="https://github.com/WordPress/playground/pull/964">#964</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Blueprints</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add enableMultisite step. (<a href="https://github.com/WordPress/playground/pull/888">#888</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Set_current_user to admin before activating plugins and themes. (<a href="https://github.com/WordPress/playground/pull/984">#984</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Tools</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Use .zip files instead of .data files for loading WordPress. (<a href="https://github.com/WordPress/playground/pull/978">#978</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Blueprints</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Throw on failure. (<a href="https://github.com/WordPress/playground/pull/982">#982</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">PHP WebAssembly</h4>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Support wp-cli in the browser. (<a href="https://github.com/WordPress/playground/pull/957">#957</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP WebAssembly</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Correcting OOB &amp; Prevent Crash on Saving Large Post. (<a href="https://github.com/WordPress/playground/pull/870">#870</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Memory leak: Add rotatedPHP to kill and recreate PHP instances after a certain number of requests. (<a href="https://github.com/WordPress/playground/pull/990">#990</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP : Add args and descriptors dynamic arrays in proc open function. (<a href="https://github.com/WordPress/playground/pull/969">#969</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP.wasm: Fix stack overflow in wasm_set_request_body. (<a href="https://github.com/WordPress/playground/pull/993">#993</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Website</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add .htaccess file to prevent caching of index.html and enable importing the client.js library. (<a href="https://github.com/WordPress/playground/pull/989">#989</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Add og meta tags and meta description. (<a href="https://github.com/WordPress/playground/pull/980">#980</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>CORS headers for client/index.js. (<a href="https://github.com/WordPress/playground/pull/893">#893</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>wp-cli: Respect quotes when parsing shell commands. (<a href="https://github.com/WordPress/playground/pull/966">#966</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Internal</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Remove the interactive block playground. (<a href="https://github.com/WordPress/playground/pull/988">#988</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Bug Fixes</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Fix "WP-CLI" typos. (<a href="https://github.com/WordPress/playground/pull/971">#971</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fix footer styling issue in the "Code is Poetry" in wordpress.github.io/wordpress-playground. (<a href="https://github.com/WordPress/playground/pull/959">#959</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>WordPress build: Add newlines after PHP annotations. (<a href="https://github.com/WordPress/playground/pull/986">#986</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Various</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Add a blueprint example. (<a href="https://github.com/WordPress/playground/pull/946">#946</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Add terminal to playground site. (<a href="https://github.com/WordPress/playground/pull/161">#161</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Match the .nvmrc node version to the changes made in commit ec2605b. (<a href="https://github.com/WordPress/playground/pull/972">#972</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP : Dispatch available descriptor specs in js_open_process function. (<a href="https://github.com/WordPress/playground/pull/963">#963</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>PHP : Give access to command arguments if array type is given in php ^7.4 proc_open function. (<a href="https://github.com/WordPress/playground/pull/944">#944</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Rebuild WordPress. (<a href="https://github.com/WordPress/playground/pull/987">#987</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Update the networking disabled error messages in wp-admin for plugins and themes. (<a href="https://github.com/WordPress/playground/pull/936">#936</a>)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Contributors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following contributors merged PRs in this release:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@adamziel @bph @ironnysh @marcarmengou @mho22 @rowasc @seanmorris @swissspidy @tyrann0us</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">[v0.5.9] - 2021-09-29</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Changed</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>– <strong>Breaking:</strong> Remoddsaved the PHPBrowser class (<a href="https://github.com/WordPress/wordpress-playground/pull/1302">##1302</a>)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Added</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>– Added CHANGELOG.md to keep track of notable changes (<a href="https://github.com/WordPress/wordpress-playground/pull/1302">##1302</a>)</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[08-query-api]]></title>
  <link>http://127.0.0.1:9400/?page_id=3</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Query API</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground exposes a simple API that you can use to configure the Playground in the browser.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It works by passing configuration options as query parameters to the Playground URL. For example, to install the pendant theme, you would use the following URL:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>https:&#47;&#47;playground.wordpress.net/?theme=pendant
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You can go ahead and try it out. The Playground will automatically install the theme and log you in as an admin. You may even embed this URL in your website using an <code>&lt;iframe></code> tag:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><iframe src="https://playground.wordpress.net/?theme=pendant">
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Available options</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>| Option                 | Default Value                                   | Description                                                                                                                                                                                                                                                                                                                                                    |<br>| ---------------------- | ----------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |<br>| <code>php</code>                  | <code>8.0</code>                                           | Loads the specified PHP version. Supported values: <code>7.0</code>, <code>7.1</code>, <code>7.2</code>, <code>7.3</code>, <code>7.4</code>, <code>8.0</code>, <code>8.1</code>, <code>8.2</code>, <code>8.3</code>, <code>latest</code>                                                                                                                                                                                                                                     |<br>| <code>wp</code>                   | <code>latest</code>                                        | Loads the specified WordPress version. Supported values: The last three major WordPress versions. As of April 4, 2024, that's <code>6.3</code>, <code>6.4</code>, <code>6.5</code>. You can also use these values: <code>latest</code>, <code>nightly</code>, <code>beta</code>                                                                                                                                                  |<br>| <code>blueprint-url</code>        |                                                 | The URL of the Blueprint that will be used to configure this Playground instance.                                                                                                                                                                                                                                                                              |<br>| <code>php-extension-bundle</code> |                                                 | Loads a bundle of PHP extensions. Supported bundles: <code>kitchen-sink</code> (for finfo, gd, mbstring, iconv, openssl, libxml, xml, dom, simplexml, xmlreader, xmlwriter), <code>light</code> (saves 6MB of downloads, loads none of the above extensions)                                                                                                                         |<br>| <code>networking</code>           | <code>yes</code> or <code>no</code>                                   | Enables or disables the networking support for Playground. Defaults to <code>no</code>                                                                                                                                                                                                                                                                                    |<br>| <code>plugin</code>               |                                                 | Installs the specified plugin. Use the plugin name from the plugins directory URL, e.g. for a URL like <code>https://wordpress.org/plugins/wp-lazy-loading/</code>, the plugin name would be <code>wp-lazy-loading</code>. You can pre-install multiple plugins by saying <code>plugin=coblocks&amp;plugin=wp-lazy-loading&amp;…</code>. Installing a plugin automatically logs the user in as an admin |<br>| <code>theme</code>                |                                                 | Installs the specified theme. Use the theme name from the themes directory URL, e.g. for a URL like <code>https://wordpress.org/themes/disco/</code>, the theme name would be <code>disco</code>. Installing a theme automatically logs the user in as an admin                                                                                                                      |<br>| <code>url</code>                  | <code>/wp-admin/</code>                                    | Load the specified initial page displaying WordPress                                                                                                                                                                                                                                                                                                           |<br>| <code>mode</code>                 | <code>seamless</code>, <code>browser</code>, or <code>browser-full-screen</code> | Displays WordPress on a full-page or wraps it in a browser UI                                                                                                                                                                                                                                                                                                  |<br>| <code>lazy</code>                 |                                                 | Defer loading the Playground assets until someone clicks on the "Run" button                                                                                                                                                                                                                                                                                   |<br>| <code>login</code>                | <code>yes</code>                                           | Logs the user in as an admin. Set to <code>no</code> to not log in.                                                                                                                                                                                                                                                                                                       |<br>| <code>multisite</code>            | <code>no</code>                                            | Enables the WordPress multisite mode.                                                                                                                                                                                                                                                                                                                          |<br>| <code>storage</code>              |                                                 | Selects the storage for Playground: <code>none</code> gets erased on page refresh, <code>browser</code> is stored in the browser, and <code>device</code> is stored in the selected directory on a device. The last two protect the user from accidentally losing their work upon page refresh.                                                                                                 |<br>| <code>import-site</code>          |                                                 | Imports site files and database from a zip file specified by URL.                                                                                                                                                                                                                                                                                              |<br>| <code>import-wxr</code>           |                                                 | Imports site content from a WXR file specified by URL. It uses the WordPress Importer, so the default admin user must be logged in.                                                                                                                                                                                                                            |<br>| <code>site-slug</code>            |                                                 | Selects which site to load from browser storage. This must be used in combination with <code>storage=browser</code>                                                                                                                                                                                                                                                       |</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, the following code embeds a Playground with a preinstalled Gutenberg plugin, and opens the post editor:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><iframe src="https://playground.wordpress.net/?plugin=gutenberg&amp;url=/wp-admin/post-new.php&amp;mode=seamless"> </iframe>
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>:::info CORS policy</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To import files from a URL, such as a site zip package, they must be served with <code>Access-Control-Allow-Origin</code> header set. For reference, see: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#the_http_response_headers">Cross-Origin Resource Sharing (CORS)</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">GitHub Export Options</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following additional query parameters may be used to pre-configure the GitHub export form:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><code>gh-ensure-auth</code>: If set to <code>yes</code>, Playground will display a modal to ensure the<br>user is authenticated with GitHub before proceeding.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>ghexport-repo-url</code>: The URL of the GitHub repository to export to.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>ghexport-pr-action</code>: The action to take when exporting (create or update).</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>ghexport-playground-root</code>: The root directory in the Playground to export from.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>ghexport-repo-root</code>: The root directory in the repository to export to.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>ghexport-content-type</code>: The content type of the export (plugin, theme, wp-content, custom-paths).</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>ghexport-plugin</code>: Plugin path. When the content type is <code>plugin</code>, pre-select the plugin to export.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>ghexport-theme</code>: Theme directory name. When the content type is <code>theme</code>, pre-select the theme to export.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>ghexport-path</code>: A path relative to <code>ghexport-playground-root</code>. Can be provided multiple times. When the<br>content type is <code>custom-paths</code>, it pre-populates the list of paths to export.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>ghexport-commit-message</code>: The commit message to use when exporting.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>ghexport-allow-include-zip</code>: Whether to offer an option to include a zip file in the GitHub<br>export (yes, no). Optional. Defaults to <code>yes</code>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[01-start-here]]></title>
  <link>http://127.0.0.1:9400/?page_id=4</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">WordPress Playground</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>:::info <strong>Looking for the official Playground website?</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>WordPress Playground website moved to <a href="https://wordpress.org/playground/">wordpress.org/playground/</a>. The site you're at now hosts the documentation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>👋 Hi! Welcome to WordPress Playground documentation. Playground is an online tool to experiment and learn about WordPress – learn more in the <a href="./02-overview.md">overview section</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The documentation consists of two major sections:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><a href="./01-index.md">Documentation</a> (you're here) – Introduction, concepts, and guides</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="/api">API reference</a> – All the APIs exposed by WordPress Playground</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>This site (Documentation) is where you will find all the information you need to start using Playground. To learn more about what this fantastic tool, read <a href="https://developer.wordpress.org/news/2024/04/05/introduction-to-playground-running-wordpress-in-the-browser/">Introduction to Playground: running WordPress in the browser</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Quick start</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><a href="../02-start-using/01-index.md">Start using WordPress Playground</a> in 5 minutes (and check out the <a href="https://playground.wordpress.net/">demo site</a>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="../03-build-an-app/01-index.md">Build your first app</a> with WordPress Playground</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Use Playground as a zero-setup <a href="../05-local-development/02-vscode-extension.md">local development environment</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Read about the <a href="../12-limitations/01-index.md">limitations</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="../13-contributing/09-contributor-day.md">WordCamp Contributor Day</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Take a deep dive</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>import APIList from '@site/docs/_fragments/_api_list.mdx';</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Read about <a href="../06-playground-apis/01-index.md">Playground APIs</a> and basic concepts</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Review <a href="../15-resources.md">links and resources</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Choose the right API for your app &lt;APIList /></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Dive into the <a href="../11-architecture/01-index.md">architecture</a> and learn how it all works</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Get Involved</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground is an open-source project and welcomes all contributors from code to design, and from documentation to triage. Don't worry, <strong>you don't need to know WebAssembly</strong> to contribute!</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>See the <a href="../13-contributing/01-index.md">Contributors Handbook</a> for all the details on how you can contribute.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Join us in the <code>#meta-playground</code> channel in Slack (see the <a href="https://make.wordpress.org/chat/">WordPress Slack page</a> for signup information)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>As with all WordPress projects, we want to ensure a welcoming environment for everyone. With that in mind, all contributors are expected to follow our <a href="https://make.wordpress.org/handbook/community-code-of-conduct/">Code of Conduct</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">License</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground is free software, and is released under the terms of the GNU General Public License version 2 or (at your option) any later version. See <a href="https://github.com/WordPress/wordpress-playground/blob/trunk/LICENSE">LICENSE.md</a>. for complete license.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&lt;br/>&lt;br/>&lt;p align="center">&lt;img src="https://s.w.org/style/images/codeispoetry.png?1" alt="Code is Poetry." />&lt;/p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[02-start-using]]></title>
  <link>http://127.0.0.1:9400/?page_id=5</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>import ThisIsQueryApi from '@site/docs/_fragments/_this_is_query_api.md';</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Start using WordPress Playground in 5 minutes</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground can help you with any of the following:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import TOCInline from '@theme/TOCInline';</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<TOCInline toc={toc} />
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>This page will guide you through each of these. Oh, and if you're a visual learner – here's a video:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<iframe width="752" height="423.2" title="Getting started with WordPress Playground" src="https://video.wordpress.com/v/3UBIXJ9S?autoPlay=false&amp;height=1080&amp;width=1920&amp;fill=true" class="editor-media-modal-detail__preview is-video"></iframe>
<!-- /wp:html -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Start a new WordPress site</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Every time you visit the <a href="https://playground.wordpress.net/">official demo on playground.wordpress.net</a>, you get a fresh WordPress site.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can then create pages, upload plugins, themes, import your own site, and do most things you would do on a regular WordPress.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's that easy to start!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The entire site lives in your browser and is scraped when you close the tab. Want to start over? Just refresh the page!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::info WordPress Playground is private</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Everything you build stays in your browser and is <strong>not</strong> sent anywhere. Once you're finished, you can export your site as a zip file. Or just refresh the page and start over!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Try a block, a theme, or a plugin</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can upload any plugin or theme you want in <a href="https://playground.wordpress.net/?url=/wp-admin/">/wp-admin/</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To save a few clicks, you can preinstall plugins or themes from the WordPress plugin directory by adding a <code>plugin</code> or <code>theme</code> parameter to the URL. For example, to install the coblocks plugin, you can use this URL:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>https://playground.wordpress.net/?plugin=coblocks</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Or this URL to preinstall the <code>pendant</code> theme:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>https://playground.wordpress.net/?theme=pendant</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also mix and match these parameters and even add multiple plugins:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>https://playground.wordpress.net/?plugin=coblocks&amp;plugin=friends&amp;theme=pendant</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<ThisIsQueryApi />
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>:::info Plugin directory doesn't work in WordPress Playground</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Plugins must be installed manually because your WordPress site doesn't send any data to the internet. You won't be able to navigate the WordPress plugin directory inside <code>/wp-admin/</code>. The Query API method may seem to contradict that, but behind the scenes it uses the same plugin upload form as you would.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Save your site</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To keep your WordPress Playground site for longer than a single browser session, you can export it as a zip file.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Use the "Export" button in the top bar:</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="@site/static/img/export-button.png" alt=""/><figcaption class="wp-element-caption">Export button</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The exported file contains the complete site you've built. You could host it on any server that supports PHP and SQLite. All WordPress core files, plugins, themes, and everything else you've added to your site are in there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The SQLite database file is also included in the export, you'll find it <code>wp-content/database/.ht.sqlite</code>. Keep in mind that files starting with a dot are hidden by default on most operating systems so you might need to enable the "Show hidden files" option in your file manager.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Restore a saved site</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can restore the site you saved by using the import button in WordPress Playground:</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="@site/static/img/import-button.png" alt=""/><figcaption class="wp-element-caption">Import button</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Use a specific WordPress or PHP version</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The easiest way is to use the version switcher on <a href="https://playground.wordpress.net/">the official demo site</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="@site/static/img/wp-version-switcher.png" alt=""/><figcaption class="wp-element-caption">WordPress Version switcher</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>:::info Test your plugin or theme</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Compatibility testing with so many WordPres and PHP versions was always a pain. WordPress Playground makes this process effortless – use it to your advantage!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also use the <code>wp</code> and <code>php</code> query parameters to open Playground with the right versions already loaded:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>https://playground.wordpress.net/?wp=6.5</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>https://playground.wordpress.net/?php=7.4</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>https://playground.wordpress.net/?php=8.2&amp;wp=6.2</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:html -->
<ThisIsQueryApi />
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>:::info Major versions only</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can specify major versions like <code>wp=6.2</code> or <code>php=8.1</code> and expect the most recent release in that line. You cannot, however, request older minor versions so neither <code>wp=6.1.2</code> nor <code>php=7.4.9</code> will work.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Import a WXR file</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can import a WordPress export file by uploading a WXR file in <a href="https://playground.wordpress.net/?url=/wp-admin/import.php">/wp-admin/</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also use <a href="../09-blueprints-api/01-index.md">JSON Blueprints</a>. See <a href="../09-blueprints-api/01-index.md">getting started with Blueprints</a> to learn more.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is different from the import feature described above. The import feature exports the entire site, including the database. This import feature imports a WXR file into an existing site.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Build apps with WordPress Playground</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground is programmable which means you can build WordPress apps, setup plugin demos, and even use it as a zero-setup local development environment.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To learn more about developing with WordPress Playground, check out the <a href="../03-build-an-app/01-index.md">development quick start</a> section.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>5</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[12-limitations]]></title>
  <link>http://127.0.0.1:9400/?page_id=6</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Limitations</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground is under active development and has some limitations you should keep in mind when running it and developing with it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can track the status of these issues on the <a href="https://github.com/orgs/WordPress/projects/180">Playground Project board</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">In the browser</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Access the Plugins, Themes, Blocks, or Patterns directories</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Playground <a href="../09-blueprints-api/03-data-format.md#features">disables network connections</a> by default, blocking access to wp.org assets (themes, plugins, blocks, or patterns) in <code>wp-admin</code>. You can still upload zipped plugin and theme files from your device or enable the option via the <a href="../08-query-api/01-index.md#available-options">Query API</a> or <a href="../09-blueprints-api/09-troubleshoot-and-debug-blueprints.md#review-common-gotchas">Blueprints API</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Temporary by design</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As Playground <a href="../01-start-here/02-overview.md#streamed-not-served">streams rather than serves</a> WordPress, all database changes and uploads will be gone when you refresh the page. To avoid losing your work, either <a href="../02-start-using/01-index.md#save-your-site">export your work</a> before or enable storage in the browser/device via the <a href="../08-query-api/01-index.md#available-options">Query API</a> or the UI.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">When developing with Playground</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Iframe quirks</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Playground renders WordPress in an <code>iframe</code> so clicking links with <code>target="_top"</code> will reload the page you’re working on.<br>Also, JavaScript popups originating in the <code>iframe</code> may not always display.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Run WordPress PHP functions</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Playground supports running PHP code in Blueprints using the <a href="../09-blueprints-api/05-steps.md#RunPHPStep"><code>runPHP</code> step</a>. To run WordPress-specific PHP functions, you’d need to first require <a href="https://github.com/WordPress/WordPress/blob/master/wp-load.php">wp-load.php</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"step": "runPHP",
	"code": ""
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Using WP-CLI</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can execute <code>wp-cli</code> commands via the Blueprints <a href="../09-blueprints-api/05-steps.md#WPCLIStep"><code>wp-cli</code></a> step. However, since Playground runs in the browser, it doesn't support the <a href="https://developer.wordpress.org/cli/commands/">full array</a> of available commands. While there is no definite list of supported commands, experimenting in <a href="https://playground.wordpress.net/demos/wp-cli.html">the online demo</a> will help you assess what's possible.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>6</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[02-code.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=7</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Code contributions</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Like all WordPress projects, Playground uses GitHub to manage code and track issues. The main repository is at <a href="https://github.com/WordPress/wordpress-playground">https://github.com/WordPress/wordpress-playground</a> and the Playground Tools repository is at <a href="https://github.com/WordPress/playground-tools/">https://github.com/WordPress/playground-tools/</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::info Contribute to Playground Tools</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This guide includes links to the main repository, but all the steps and options apply for both. If you're interested in the plugins or local development tools—start there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Browse <a href="https://github.com/wordpress/wordpress-playground/issues">the list of open issues</a> to find what to work on. The <a href="https://github.com/wordpress/wordpress-playground/issues?q=is%3Aopen+is%3Aissue+label%3A%22Good+First+Issue%22"><code>Good First Issue</code></a> label is a recommended starting point for first-time contributors.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Be sure to review the following resources before you begin:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><a href="./03-coding-standards.md">Coding principles</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="../11-architecture/01-index.md">Architecture</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://github.com/WordPress/wordpress-playground/issues/472">Vision and Philosophy</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://github.com/WordPress/wordpress-playground/issues/525">WordPress Playground Roadmap</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Contribute Pull Requests</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://github.com/WordPress/wordpress-playground/fork">Fork the Playground repository</a> and clone it to your local machine. To do that, copy and paste these commands into your terminal:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>git clone -b trunk --single-branch --depth 1

# replace `YOUR-GITHUB-USERNAME` with your GitHub username:
git@github.com:YOUR-GITHUB-USERNAME/wordpress-playground.git
cd wordpress-playground
npm install
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Create a branch, make changes, and test it locally by running the following command:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>npm run dev
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Playground will open in a new browser tab and refresh automatically with each change.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When your'e ready, commit the changes and submit a Pull Request.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::info Formatting</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We handle code formatting and linting automatically. Relax, type away, and let the machines do the work.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Running a local Multisite</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Multisite has a few <a href="https://developer.wordpress.org/advanced-administration/multisite/prepare-network/#restrictions">restrictions when run locally</a>. If you plan to test a Multisite network using Playground's <code>enableMultisite</code> step, make sure you either change <code>wp-now</code>'s default port or set a local test domain running via HTTPS.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To change <code>wp-now</code>'s default port to the one supported by WordPress Multisite, run it using the <code>--port=80</code> flag:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>npx @wp-now/wp-now start --port=80
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>There are a few ways to set up a local test domain, including editing your <code>hosts</code> file. If you're unsure how to do that, we suggest installing <a href="https://laravel.com/docs/11.x/valet">Laravel Valet</a> and then running the following command:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>valet proxy playground.test http://localhost:5400 --secure
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Your dev server is now available on https://playground.test.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Debugging</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Use VS Code and Chrome</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you're using VS Code and have Chrome installed, you can debug Playground in the code editor:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Open the project folder in VS Code.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Select Run > Start Debugging from the main menu or press <code>F5</code>/<code>fn</code>+<code>F5</code>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Debugging PHP</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Playground logs PHP errors in the browser console after every PHP request.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>7</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[03-build-an-app]]></title>
  <link>http://127.0.0.1:9400/?page_id=8</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Build an app with WordPress Playground in 5 minutes</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground was created as a programmable tool. Below you'll find a few examples of what you can do with it. Each discussed API is described in detail in the <a href="../06-playground-apis/01-index.md">APIs section</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import TOCInline from '@theme/TOCInline';</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<TOCInline toc={toc} />
<!-- /wp:html -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Embed WordPress on your website</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Playground can be embedded on your website using the HTML <code>&lt;iframe></code> tag as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><iframe src="https://playground.wordpress.net/">
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Every visitor will get their own private WordPress instance for free. You can then customize it using one of the <a href="../06-playground-apis/01-index.md">Playground APIs</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import PlaygroundWpNetWarning from '@site/docs/_fragments/_playground_wp_net_may_stop_working.md';</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<PlaygroundWpNetWarning />
<!-- /wp:html -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Control the embedded website</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground provides three APIs you can use to control the iframed website. All the examples in this section are built using one of these:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import APIList from '@site/docs/_fragments/_api_list.mdx';</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<APIList />
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Learn more about each of these APIs in the <a href="../06-playground-apis/01-index.md">APIs overview section</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Showcase a plugin or theme from WordPress directory</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>import ThisIsQueryApi from '@site/docs/_fragments/_this_is_query_api.md';</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can install plugins and themes from the WordPress directory with only URL parameters. For example this iframe would come with the <code>coblocks</code> and <code>friends</code> plugins preinstalled as well as the <code>pendant</code> theme.</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<ThisIsQueryApi />
<!-- /wp:html -->

<!-- wp:code -->
<pre class="wp-block-code"><code><iframe src="https://playground.wordpress.net/?plugin=coblocks">
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Showcase any plugin or theme</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>What if your plugin is not in the WordPress directory?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can still showcase it on Playground by using <a href="../09-blueprints-api/01-index.md">JSON Blueprints</a>. For example, this Blueprint would download and install a plugin and a theme from your website and also import some starter content:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"steps": &#91;
		{
			"step": "installPlugin",
			"pluginZipFile": {
				"resource": "url",
				"url": "https://your-site.com/your-plugin.zip"
			}
		},
		{
			"step": "installTheme",
			"themeZipFile": {
				"resource": "url",
				"url": "https://your-site.com/your-theme.zip"
			}
		},
		{
			"step": "importWxr",
			"pluginZipFile": {
				"resource": "url",
				"url": "https://your-site.com/starter-content.wxr"
			}
		}
	]
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>See <a href="../09-blueprints-api/01-index.md">getting started with Blueprints</a> to learn more.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Preview pull requests from your repository</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>See the <a href="https://playground.wordpress.net/gutenberg.html">live example of Gutenberg PR previewer</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can use Playground as a Pull Request previewer if:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Your WordPress plugin or theme uses a CI pipeline</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Your CI pipeline bundles your plugin or theme</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>You can expose the zip file generated by your CI pipeline publicly</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Those zip bundles aren't any different from regular WordPress Plugins, which means you can install them in Playground using the <a href="../09-blueprints-api/01-index.md">JSON Blueprints</a> API. Once you exposed an endpoint like https://your-site.com/pull-request-1234.zip, the following Blueprint will do the rest:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"steps": &#91;
		{
			"step": "installPlugin",
			"pluginZipFile": {
				"resource": "url",
				"url": "https://your-site.com/pull-request-1234.zip"
			}
		}
	]
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The official Playground demo uses this technique to preview pull requests from the Gutenberg repository:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import BlueprintExample from '@site/src/components/Blueprints/BlueprintExample.mdx';</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><blueprintexample<br>blueprint={{<br>"landingPage": "/wp-admin/plugins.php?test=42test",<br>"steps": [<br>{<br>"step": "login",<br>"username": "admin",<br>"password": "password"<br>},<br>{<br>"step": "mkdir",<br>"path": "/wordpress/pr"<br>},<br>{<br>"step": "writeFile",<br>"path": "/wordpress/pr/pr.zip",<br>"data": {<br>"resource": "url",<br>"url": "/plugin-proxy.php?org=WordPress&amp;repo=gutenberg&amp;workflow=Build%20Gutenberg%20Plugin%20Zip&amp;artifact=gutenberg-plugin&amp;pr=60819",<br>"caption": "Downloading Gutenberg PR 47739"<br>},<br>"progress": {<br>"weight": 2,<br>"caption": "Applying Gutenberg PR 47739"<br>}<br>},<br>{<br>"step": "unzip",<br>"zipPath": "/wordpress/pr/pr.zip",<br>"extractToPath": "/wordpress/pr"<br>},<br>{<br>"step": "installPlugin",<br>"pluginZipFile": {<br>"resource": "vfs",<br>"path": "/wordpress/pr/gutenberg.zip"<br>}<br>}<br>]<br>}} /></blueprintexample<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Build a compatibility testing environment</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A live plugin demo with a configurable PHP and WordPress makes an excellent compatibility testing environment.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With the Query API, you'd simply add the <code>php</code> and <code>wp</code> query parameters to the URL:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><iframe src="https://playground.wordpress.net/?php=7.4&amp;wp=6.1">
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With JSON Blueprints, you'd use the <code>preferredVersions</code> property:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"preferredVersions": {
		"php": "7.4",
		"wp": "6.1"
	}
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Run PHP code in the browser</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The JavaScript API provides the <code>run()</code> method which you can use to run PHP code in the browser:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><iframe id="wp">
<script><br>	const client = await startPlaygroundWeb({<br>		iframe: document.getElementById('wp'),<br>		remoteUrl: 'https://playground.wordpress.net/remote.html',<br>	});<br>	await client.isReady;<br>	await client.run({<br>		code: `<?php<br>		require("/wordpress/wp-load.php");<br><br>		update_option("blogname", "Playground is really cool!");<br>		echo "Site title updated!";<br>		`,<br>	});<br>	client.goTo('/');<br></script>
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Combine that with a code editor like Monako or CodeMirror, and you'll get live code snippets like in <a href="https://adamadam.blog/2023/02/16/how-to-modify-html-in-a-php-wordpress-plugin-using-the-new-tag-processor-api/">this article</a>!</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>8</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[11-architecture]]></title>
  <link>http://127.0.0.1:9400/?page_id=9</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Architecture overview</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground consists of the following high-level components:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><a href="./15-wordpress.md">WordPress</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="./02-wasm-php-overview.md">WebAssembly PHP</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="./08-browser-concepts.md">Browser bindings</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Node.js bindings via <a href="https://npmjs.com/package/@php-wasm/node">@php-wasm/node</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="../06-playground-apis/01-index.md">Public API</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Visit each section to learn more about the specific parts of the architecture.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Tooling</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">NX: building packages and projects</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground uses <a href="https://nx.dev/">NX</a>, a build system designed for monorepos.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The dependencies between Playground packages and projects <a href="https://github.com/WordPress/wordpress-playground/pull/151">are too complex</a> for a bundler like Webpack, and NX handles this complexity much better:<br><img src="@site/static/img/dependencies.png">Dependency graph</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To learn more, head over to the <a href="https://nx.dev/getting-started/intro">NX developer docs</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Lerna: publishing packages and projects</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground includes several NPM packages, a VS Code extension, WordPress plugins, a web app, and other GitHub releases, all managed across two monorepos: the main <a href="https://github.com/WordPress/wordpress-playground">wordpress-playground</a> and <a href="https://github.com/WordPress/playground-tools/">Playground Tools</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We use <a href="https://lerna.js.org">Lerna</a> to build, manage, and publish all JavaScript/TypeScript packages. Lerna handles everything simultaneously: it increments the version number, sets a new tag, and publishes the modified packages to <code>npm</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The published packages share the same version number, so when updating a single package, Lerna bumps the version number of all dependent packages.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>9</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[13-contributing]]></title>
  <link>http://127.0.0.1:9400/?page_id=10</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Start contributing</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground is an open-source project that welcomes all contributors—from code to design, documentation to triage.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">How can I contribute?</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Code? See the <a href="./02-code.md">developer section</a>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Documentation? See the <a href="./20-documentation.md">documentation section</a>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Reporting bugs? Open a <a href="https://github.com/WordPress/wordpress-playground/issues/new">new issue</a> in the main GitHub repository, or in <a href="https://github.com/WordPress/playground-tools/issues/new">Playground Tools</a>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Ideas, designs, or anything else? Open a <a href="https://github.com/WordPress/wordpress-playground/discussions">GitHub discussion</a>, and let's talk!</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Guidelines</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>As with all WordPress projects, we want to ensure a welcoming and respectful environment for everyone. Please read our community's <a href="https://make.wordpress.org/handbook/community-code-of-conduct/">Code of Conduct</a> to learn more.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Code contributors should review the <a href="./03-coding-standards.md">coding principles</a>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>You maintain copyright over any contribution you make. By submitting a Pull Request, you agree to release that code under <a href="https://github.com/WordPress/wordpress-playground?tab=GPL-2.0-1-ov-file#readme">WordPress Playground License</a>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Triaging issues</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Want to help sort through open issues and resolve potential bugs? Here's how:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol class="wp-block-list"><!-- wp:list-item -->
<li>Review the <a href="https://github.com/WordPress/wordpress-playground/issues?q=is%3Aopen+is%3Aissue">list of open issues</a> and find the ones that you can help with. Same goes for the <a href="https://github.com/WordPress/playground-tools/issues?q=is%3Aopen+is%3Aissue">Plaground Tools repository</a>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Read through the description and comments.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>If it's a bug you can reproduce, add a descriptive comment or a potential fix.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Otherwise, add a comment with any additional information that may be helpful.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>10</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[02-overview.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=11</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Overview</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground is an online platform that allows you to experiment and learn about WordPress without affecting your live website. It's a virtual sandbox where you can play around with different features, designs, and settings in a safe and controlled environment.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Here's how it works</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When you first start using WordPress Playground, you'll be provided with a separate space where you can create and customise your own WordPress website. This space is completely isolated from your actual website.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Try themes and plugins on the fly</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Within the WordPress Playground, you can explore various <a href="https://developer.wordpress.org/themes/getting-started/what-is-a-theme/">themes</a>. You can choose from a wide range of themes and see how they look on your site. You can also modify the colors, fonts, layouts, and other visual elements to create a unique design.<br>In addition to themes, you can experiment with plugins too. With WordPress Playground, you can install and test different plugins to see how they work and what they can do for your site. This allows you to explore and understand the capabilities of WordPress without worrying about breaking anything.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Create content on the go</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another great feature of WordPress Playground is the ability to create and edit content. You can write blog posts, create pages and add media like images and videos to your site. This helps you understand how to organize and structure your content effectively.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The content you create is limited to the Playground on your device and disappears once you leave it, so you are free to explore and play without risking breaking any actual site.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">And, yes it's safe</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Overall, WordPress Playground provides a risk-free environment for beginners to learn and get hands-on experience with WordPress. It helps you to gain confidence and knowledge before making changes to your live website.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">What makes Playground different from running WordPress on a web server or local desktop app?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Web applications like WordPress have long-relied on server technologies <a href="https://wordpress.github.io/wordpress-playground/architecture/wasm-php-overview">to run logic</a> and <a href="https://wordpress.github.io/wordpress-playground/architecture/wordpress#sqlite">to store data</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Using those technologies has meant either running an web server connected to the internet or using those technologies in a desktop service or app (sometimes called a "WordPress local environment") that either leans on a virtual server with the technologies installed or the underlying technologies on the current device.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Playground is a novel way to stream server technologies -- and WordPress <em>(and WP-CLI)</em> -- as files that can then run in the browser.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading"><em>Streamed</em>, not served.</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The WordPress you see when you open Playground in your browser is a WordPress that should function like any WordPress, with <a href="https://wordpress.github.io/wordpress-playground/limitations">a few limitations</a> and the important exception that it's not a permanent server with an internet address which will limit connections to some third-party services (automation, sharing, analysis, email, backups, etc.) in a persistient way.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The loading screen and progress bar you see on Playground includes both the streaming of those foundational technologies to your browser and configuration steps <a href="https://wordpress.github.io/wordpress-playground/blueprints-api/examples">(examples)</a> from <a href="https://github.com/WordPress/blueprints-library">WordPress Blueprints</a>, so that a full server, WordPress software, Theme &amp; Plugin solutions and configuration instructions can be streamed over-the-wire.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While many WordPress solutions may require internet connectivity to interact with social networks, live feeds and other internet services, those kind of connections <a href="https://wordpress.github.io/wordpress-playground/architecture/wasm-php-overview/#networking-support-varies-between-platforms">could be limited in Playground</a>. However, by enabling network connectivity in the Customize Playground settings modal <a href="https://playground.wordpress.net/?networking=yes">(example URL w/ query parameter)</a>, you can mostly wire-up internet connectivity to the WordPress in Playground.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>11</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[09-blueprints-api]]></title>
  <link>http://127.0.0.1:9400/?page_id=12</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>import BlueprintExample from '@site/src/components/Blueprints/BlueprintExample.mdx';</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Getting started with Blueprints</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Blueprints are JSON files for setting up your very own WordPress Playground instance. For example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"$schema": "https://playground.wordpress.net/blueprint-schema.json",
	"landingPage": "/wp-admin/",
	"preferredVersions": {
		"php": "8.0",
		"wp": "latest"
	},
	"phpExtensionBundles": &#91;"kitchen-sink"],
	"steps": &#91;
		{
			"step": "login",
			"username": "admin",
			"password": "password"
		}
	]
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>There are three ways to use Blueprints:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><a href="./02-using-blueprints.md#url-fragment">Paste a Blueprint into the URL "fragment" on WordPress Playground website</a>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="./02-using-blueprints.md#javascript-api">Use them with the JavaScript API</a>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://wordpress.github.io/wordpress-playground/query-api">Reference a blueprint JSON file via QueryParam blueprint-url</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">What problems are solved by Blueprints?</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">No coding skills required</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Blueprints are just JSON. You don't need a development environment, any libraries, or even JavaScript knowledge. You can write them in any text editor.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, if you do have a development environment, that's great! You can use the <a href="https://playground.wordpress.net/blueprint-schema.json">Blueprint JSON schema</a> to get autocompletion and validation.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">HTTP Requests are managed for you</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Blueprints fetch any resources you declare for you. You don't have to worry about managing multiple <code>fetch()</code> calls or waiting for them to finish. You can just declare a few links and let Blueprints handle and optimize the downloading pipeline.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">You can link to a Blueprint-preconfigured Playground</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Because Blueprints can be pasted in the URL, you can embed or link to a Playground with a specific configuration. For example, clicking this button will open a Playground with PHP 7.4 and a pendant theme installed:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><blueprintexample justbutton="{true}" blueprint="{{<br">"preferredVersions": {<br>"php": "7.4",<br>"wp": "latest"<br>},<br>"steps": [<br>{<br>"step": "installTheme",<br>"themeZipFile": {<br>"resource": "wordpress.org/themes",<br>"slug": "pendant"<br>},<br>"options": {<br>"activate": true<br>}<br>}<br>]<br>}} /></blueprintexample></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Trusted by default</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Blueprints are just JSON. Running other people's Blueprints doesn't require the element of trust. Since Blueprints cannot execute arbitrary JavaScript, they are limited in what they can do.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With Blueprints, WordPress.org plugin directory may be able to offer live previews of plugins. Plugin authors will just write a custom Blueprint to preconfigure the Playground instance with any site options or starter content they may need.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Write it once, use it anywhere</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Blueprints work both on the web and in node.js. You can run them both in the same JavaScript process, and through a remote Playground Client. They are the universal language of configuration. Where you can run Playground, you can use Blueprints.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Learn More</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Enhance your understanding of Blueprints with these resources:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><a href="https://github.com/adamziel/blueprints/blob/trunk/docs/index.md">Blueprints 101</a> - Blueprints API crash course</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>12</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[05-steps.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=13</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Steps</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <code>steps</code> property of a Blueprint is an array of steps to run. For example this Blueprint logs the user in as an admin:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import BlueprintExample from '@site/src/components/Blueprints/BlueprintExample.mdx';</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><blueprintexample blueprint="{{<br">"steps": [<br>{<br>"step": "login",<br>"username": "admin",<br>"password": "password"<br>}<br>]<br>}} /></blueprintexample></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Each step is an object that contains a <code>step</code> property that specifies the type of step to run. The rest of the properties depend on the type of step. Learn and try each step type below.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>import BlueprintStep from '@site/src/components/BlueprintsAPI/BlueprintStep';<br>import { BlueprintSteps, getStepAPI } from '@site/src/components/BlueprintsAPI/model';<br>import UpdateTopLevelToc from '@site/src/components/UpdateTopLevelToc';</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><updatetopleveltoc<br>toc={toc}<br>tocItems={<br>BlueprintSteps<br>.map(name => ({<br>value: getStepAPI(name).stepId,<br>id: name,<br>level: 2<br>}))<br>} /></updatetopleveltoc<br></p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<span>
	{BlueprintSteps.map((name) => (
		<>
			<BlueprintStep name={name} key={name} />
			<hr/>
		</>
	))}
</span>
<!-- /wp:html -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>13</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[10-javascript-api]]></title>
  <link>http://127.0.0.1:9400/?page_id=14</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">JavaScript API</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground comes with a JavaScript API client that grants you full control over your WordPress.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::info API here doesn't mean "REST API"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>WordPress Playground is a browser-based application.<br>The term API here refers to a set of functions you can<br>call inside JavaScript. This is <strong>not</strong> a network-based REST API.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Quick start</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To use the JavaScript API, you'll need:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>An <code>&lt;iframe></code> element</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The <code>@wp-playground/client</code> package (from npm or a CDN)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Here's the shortest example of how to use the JavaScript API in a HTML page:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import JSApiShortExample from '@site/docs/_fragments/_js_api_short_example.mdx';</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<JSApiShortExample />
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>:::info /remote.html is a special URL</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/remote.html</code> is a special URL that loads the Playground<br>API endpoint instead of the demo app with the browser UI. Read more about the difference between <code>/</code> and <code>/remote.html</code> and <a href="./02-index-html-vs-remote-html.md">on this page</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Controlling the website</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now that you have a <code>client</code> object, you can use it to control the website inside the iframe. There are three ways to do that:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><a href="./03-playground-api-client.md">Playground API Client</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="./04-blueprint-json-in-api-client.md">Blueprint JSON</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="./05-blueprint-functions-in-api-client.md">Blueprint functions</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Debugging and testing</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For quick testing and debugging, the JavaScript API client is exposed as <code>window.playground</code> by both <code>index.html</code> and <code>remote.html</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>> await playground.listFiles("/")
(6) &#91;'tmp', 'home', 'dev', 'proc', 'internal', 'wordpress']
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Note that in <code>index.html</code>, <code>playground</code> is a Proxy object and you won't get any autocompletion from the browser. In <code>remote.html</code>,<br>however, <code>playground</code> is a class instance and you will benefit from browser's autocompletion.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>14</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[06-playground-apis]]></title>
  <link>http://127.0.0.1:9400/?page_id=15</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>import ThisIsQueryApi from '@site/docs/_fragments/_this_is_query_api.md';</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">APIs overview</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground exposes a few APIs that you can use to interact with the Playground:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import TOCInline from '@theme/TOCInline';</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<TOCInline toc={toc} />
<!-- /wp:html -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Query API</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Basic operations can be done by adjusting the URL, for example here's how you can preinstall a coblocks plugin:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://playground.wordpress.net/?plugin=coblocks">https://playground.wordpress.net/?plugin=coblocks</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Or a theme:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://playground.wordpress.net/?theme=pendant">https://playground.wordpress.net/?theme=pendant</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&lt;ThisIsQueryApi /> Once you have a URL that you like, you can embed it in your website using an iframe:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><iframe style="width: 800px; height: 500px;" src="https://playground.wordpress.net/?plugin=coblocks">
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Blueprints</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you need more control over your Playground, you can use JSON Blueprints. For example, here's how to create a post and install a plugin:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import BlueprintExample from '@site/src/components/Blueprints/BlueprintExample.mdx';</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><blueprintexample<br>display={<code>{ "steps": [ { "step": "login" }, { "step": "installPlugin", "pluginZipFile": { "resource": "wordpress.org/plugins", "slug": "friends" } }, { "step": "runPHP", "code": \</code>include 'wordpress/wp-load.php';<br>wp_insert_post(array(<br>'post_title' => 'Post title',<br>'post_content' => 'Post content',<br>'post_status' => 'publish',<br>'post_author' => 1<br>));<br>`<br>}<br>]<br>}<code>	} blueprint={{ "steps": [ { "step": "login" }, { step: 'installPlugin', pluginZipFile: { resource: 'wordpress.org/plugins', slug: 'friends', }, }, { "step": "runPHP", "code": </code>include 'wordpress/wp-load.php';<br>wp_insert_post(array(<br>'post_title' => 'Post title',<br>'post_content' => 'Post content',<br>'post_status' => 'publish',<br>'post_author' => 1<br>));<br>`<br>}<br>]<br>}} /></blueprintexample<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Learn more about <a href="../09-blueprints-api/01-index.md">JSON Blueprints</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">JavaScript API</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <code>@wp-playground/client</code> package provides a JavaScript API you can use to fully control your Playground instance. Here's a very example of what you can do:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import JSApiShortExample from '@site/docs/_fragments/_js_api_short_example.mdx';</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<JSApiShortExample />
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Learn more about the <a href="../10-javascript-api/01-index.md">JavaScript API</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>15</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[15-wordpress.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=16</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">WordPress support</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress, as a PHP application, can run on PHP WebAssembly. However, there are a few caveats.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">SQLite</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>First, WordPress requires MySQL. However, there isn't a WebAssembly version of MySQL you could run in the browser. WordPress Playground, therefore, ships PHP with the <a href="https://www.php.net/manual/en/ref.pdo-sqlite.php">native SQLite driver</a> and leans on SQLite.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But how can WordPress run on a different database?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Behind the scenes, the official <a href="https://github.com/WordPress/sqlite-database-integration">SQLite Database Integration</a> plugin intercepts all MySQL queries and rewrites them in SQLite dialect. The x.0 release ships <a href="https://github.com/WordPress/sqlite-database-integration/pull/9">a new WordPress Playground-informed translation layer</a> that allows WordPress on SQLite to pass 99% of the WordPress unit test suite.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">WordPress in the browser</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground ships a <a href="./06-wasm-php-data-dependencies.md">bundled WordPress</a> that you can use in the browser. It's optimized for size, and the installation wizard is run for you.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">WordPress in Node.js</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In Node.js, you'll typically want to <a href="./05-wasm-php-filesystem.md">mount WordPress</a> from a disk directory.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>16</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[_work_in_progress.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=17</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>:::danger Work in Progress</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>WordPress Playground is under active development and the features described in this document<br>may break or change without a warning.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>17</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[08-examples.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=18</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>import BlueprintExample from '@site/src/components/Blueprints/BlueprintExample.mdx';</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Blueprints Examples</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's see some cool things you can do with Blueprints.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Install a Theme and a Plugin</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><blueprintexample blueprint="{{<br">"steps": [<br>{<br>"step": "installPlugin",<br>"pluginZipFile": {<br>"resource": "wordpress.org/plugins",<br>"slug": "coblocks"<br>}<br>},<br>{<br>"step": "installTheme",<br>"themeZipFile": {<br>"resource": "wordpress.org/themes",<br>"slug": "pendant"<br>}<br>}<br>]<br>}} /></blueprintexample></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Run custom PHP code</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><blueprintexample<br>display={<code>{ "steps": [ { "step": "runPHP", "code": "&lt;?php include 'wordpress/wp-load.php'; wp_insert_post(array( 'post_title' => 'Post title', 'post_content' => 'Post content', 'post_status' => 'publish', 'post_author' => 1 )); " } ] }</code> }<br>blueprint={{<br>"steps": [<br>{<br>"step": "runPHP",<br>"code": <code>&lt;?php include 'wordpress/wp-load.php'; wp_insert_post(array( 'post_title' => 'Post title', 'post_content' => 'Post content', 'post_status' => 'publish', 'post_author' => 1 )); </code><br>}<br>]<br>}} /></blueprintexample<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Enable an option on the Gutenberg Experiments page</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here: Switch on the "new admin views" feature.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><blueprintexample<br>display={<code>{ "steps": [ { "step": "runPHP", "code": "&lt;?php require '/wordpress/wp-load.php'; update_option( 'gutenberg-experiments', array( 'gutenberg-dataviews' => true ) );" } ] }</code>}<br>blueprint={{<br>"steps": [<br>{<br>"step": "runPHP",<br>"code": " true ) );"<br>}<br>]<br>}} /></blueprintexample<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Showcase a product demo</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><blueprintexample nobutton="" blueprint="{{<br">"steps": [<br>{<br>"step": "installPlugin",<br>"pluginZipFile": {<br>"resource": "url",<br>"url": "https://your-site.com/your-plugin.zip"<br>}<br>},<br>{<br>"step": "installTheme",<br>"themeZipFile": {<br>"resource": "url",<br>"url": "https://your-site.com/your-theme.zip"<br>}<br>},<br>{<br>"step": "importWxr",<br>"file": {<br>"resource": "url",<br>"url": "https://your-site.com/starter-content.wxr"<br>}<br>},<br>{<br>"step": "setSiteOptions",<br>"options": {<br>"some_required_option_1": "your_favorite_values",<br>"some_required_option_2": "your_favorite_values"<br>}<br>}<br>]<br>}} /></blueprintexample></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Enable PHP extensions and networking</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><blueprintexample blueprint="{{<br">"landingPage": "/wp-admin/plugin-install.php",<br>"phpExtensionBundles": [<br>"kitchen-sink"<br>],<br>"features": {<br>"networking": true<br>},<br>"steps": [<br>{<br>"step": "login"<br>}<br>]<br>}} /></blueprintexample></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Load PHP code on every request (mu-plugin)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Use the <code>writeFile</code> step to add code to a mu-plugin that runs on every request.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><blueprintexample blueprint="{{<br">"landingPage": "/category/uncategorized/",<br>"phpExtensionBundles": [<br>"kitchen-sink"<br>],<br>"features": {<br>"networking": true<br>},<br>"steps": [<br>{<br>"step": "login"<br>},<br>{<br>"step": "writeFile",<br>"path": "/wordpress/wp-content/mu-plugins/rewrite.php",<br>"data": "set_permalink_structure('/%postname%/'); $wp_rewrite->flush_rules(); } );"<br>}<br>]<br>}} /></blueprintexample></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Code editor (as a Gutenberg block)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><blueprintexample blueprint="{{<br">"landingPage": "/wp-admin/post.php?post=4&amp;action=edit",<br>"steps": [<br>{<br>"step": "login",<br>"username": "admin",<br>"password": "password"<br>},<br>{<br>"step": "installPlugin",<br>"pluginZipFile": {<br>"resource": "wordpress.org/plugins",<br>"slug": "interactive-code-block"<br>}<br>},<br>{<br>"step": "runPHP",<br>"code": " 'WordPress Playground block demo!','post_content' => '&lt;!-- wp:wordpress-playground/playground /-->', 'post_status' => 'publish', 'post_type' => 'post',]);"<br>}<br>]<br>}} /></blueprintexample></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can share your own Blueprint examples in <a href="https://github.com/WordPress/wordpress-playground/wiki/Blueprint-examples">this dedicated wiki</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Load an older WordPress version</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Playground only ships with a few recent WordPress releases. If you need to use an older version, this Blueprint can help you: change the version number in <code>"url": "https://playground.wordpress.net/plugin-proxy.php?url=https://wordpress.org/wordpress-5.9.9.zip"</code> from <code>5.9.9</code> to the release you want to load.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Note:</strong> the oldest supported WordPress version is <code>5.9.9</code>, following the SQLite integration plugin.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><blueprintexample blueprint="{{<br">"landingPage": "/wp-admin",<br>"steps": [<br>{<br>"step": "writeFile",<br>"path": "/tmp/wordpress.zip",<br>"data": {<br>"resource": "url",<br>"url": "https://playground.wordpress.net/plugin-proxy.php?url=https://wordpress.org/wordpress-5.9.9.zip",<br>"caption": "Downloading the WordPress Release"<br>}<br>},<br>{<br>"step": "importWordPressFiles",<br>"wordPressFilesZip": {<br>"resource": "vfs",<br>"path": "/tmp/wordpress.zip"<br>},<br>"pathInZip": "/wordpress",<br>"progress": {<br>"weight": 20,<br>"caption": "Importing the WordPress release"<br>}<br>},<br>{<br>"step": "runPHP",<br>"code": "},<br>{<br>"step": "login",<br>"username": "admin",<br>"password": "password"<br>}<br>]<br>}} /></blueprintexample></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>18</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[_this_is_query_api.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=19</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This is called <a href="../08-query-api/01-index.md">Query API</a> and you can learn more about it <a href="../08-query-api/01-index.md">here</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>19</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[01-wp-now.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=20</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">wp-now NPM package</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://www.npmjs.com/package/@wp-now/wp-now"><code>@wp-now/wp-now</code></a> is a CLI tool to spin up a WordPress site with a single command. Similarly to the <a href="/05-local-development/02-vscode-extension.md">VS Code extension</a>, it uses a portable WebAssembly version of PHP and SQLite. No Docker, MySQL, or Apache are required.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Launch wp-now in a plugin or theme directory</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Navigate to your plugin or theme directory and start <code>wp-now</code> with the following commands:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>cd my-plugin-or-theme-directory
npx @wp-now/wp-now start
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Launch wp-now in the <code>wp-content</code> directory with options</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can also start <code>wp-now</code> from any <code>wp-content</code> folder. The following example passes parameters for changing the PHP and WordPress versions and loading a blueprint file.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>cd my-wordpress-folder/wp-content
npx @wp-now/wp-now start --wp=6.4 --php=8.0 --blueprint=path/to/blueprint.json
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>:::info <strong>Documentation</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>wp-now</code> is maintained in a different GitHub repository, <a href="https://github.com/WordPress/playground-tools/">Playground Tools</a>. You can find the latest documentation in the <a href="https://github.com/WordPress/playground-tools/blob/trunk/packages/wp-now/README.md">dedicated README file</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Install wp-now globally</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Alternatively, you can install <code>@wp-now/wp-now</code> globally to load it from any directory:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>npm install -g @wp-now/wp-now
cd my-plugin-or-theme-directory
wp-now start
</code></pre>
<!-- /wp:code -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>20</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[04-resources.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=21</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Resources</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Resource References allow you use external files in Blueprints</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the <code>installPlugin</code> step in the example above, we reference the <code>https://downloads.wordpress.org/plugins/friends.latest-stable.zip</code> file by using the <code>wordpress.org/plugins</code> resource reference.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The following resource references are available:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import TOCInline from '@theme/TOCInline';</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<TOCInline toc={toc} />
<!-- /wp:html -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">URLReference</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The URLReference resource is used to reference files that are stored on a remote server. The URLReference resource is defined as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>type URLReference = {
	resource: 'url';
	url: string;
};
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>To use the URLReference resource, you need to provide the URL of the file. For example, to reference a file named "index.html" that is stored on a remote server, you can create a URLReference as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"resource": "url",
	"url": "https://example.com/index.html"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">CoreThemeReference</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The CoreThemeReference resource is used to reference WordPress core themes. The CoreThemeReference resource is defined as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>type CoreThemeReference = {
	resource: 'wordpress.org/themes';
	slug: string;
	version?: string;
};
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>To use the CoreThemeReference resource, you need to provide the slug of the theme. For example, to reference the "Twenty Twenty-One" theme, you can create a CoreThemeReference as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"resource": "wordpress.org/themes",
	"slug": "twentytwentyone"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">CorePluginReference</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The CorePluginReference resource is used to reference WordPress core plugins. The CorePluginReference resource is defined as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>type CorePluginReference = {
	resource: 'wordpress.org/plugins';
	slug: string;
	version?: string;
};
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>To use the CorePluginReference resource, you need to provide the slug of the plugin. For example, to reference the "Akismet" plugin, you can create a CorePluginReference as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"resource": "wordpress.org/plugins",
	"slug": "akismet"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">VFSReference</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The VFSReference resource is used to reference files that are stored in a virtual file system (VFS). The VFS is a file system that is stored in memory and can be used to store files that are not part of the file system of the operating system. The VFSReference resource is defined as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>type VFSReference = {
	resource: 'vfs';
	path: string;
};
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>To use the VFSReference resource, you need to provide the path to the file in the VFS. For example, to reference a file named "index.html" that is stored in the root of the VFS, you can create a VFSReference as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"resource": "vfs",
	"path": "/index.html"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">LiteralReference</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The LiteralReference resource is used to reference files that are stored as literals in the code. The LiteralReference resource is defined as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>type LiteralReference = {
	resource: 'literal';
	name: string;
	contents: string | Uint8Array;
};
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>To use the LiteralReference resource, you need to provide the name of the file and its contents. For example, to reference a file named "index.html" that contains the text "Hello, World!", you can create a LiteralReference as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"resource": "literal",
	"name": "index.html",
	"contents": "Hello, World!"
}
</code></pre>
<!-- /wp:code -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>21</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[06-mount-data.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=22</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Mount data</h1>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Mount a directory from the browser</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can mount a directory from the browser to Playground using the <code>window.showDirectoryPicker</code> API. Check the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showDirectoryPicker#browser_compatibility">Browser compatibility</a> before using this API.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>window.showDirectoryPicker().then(function (directoryHandle) {
	window.parent.postMessage({
		type: 'mount-directory-handle',
		directoryHandle,
		mountpoint: '/wordpress/wp-content/uploads/markdown/',
	});
});
</code></pre>
<!-- /wp:code -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>22</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[03-data-format.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=23</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Blueprint data Format</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A Blueprint can contain the following properties:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>landingPage (string): The URL to navigate to after the Blueprint has been run.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="#preferred-versions">preferredVersions</a>: The preferred PHP and WordPress versions to use.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="./05-steps.md">steps</a>: The steps to run.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Here's a Blueprint that uses all of them:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import BlueprintExample from '@site/src/components/Blueprints/BlueprintExample.mdx';</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><blueprintexample blueprint="{{<br">"landingPage": "/wp-admin/",<br>"preferredVersions": {<br>"php": "7.4",<br>"wp": "6.5"<br>},<br>"phpExtensionBundles": ["kitchen-sink"],<br>"features": {<br>"networking": true<br>},<br>"steps": [<br>{<br>"step": "login",<br>"username": "admin",<br>"password": "password"<br>}<br>]<br>}} /></blueprintexample></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">JSON Schema</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>JSON files can be tedious to write and easy to get wrong. To help with that, Playground provides a <a href="https://playground.wordpress.net/blueprint-schema.json">JSON schema</a> file that you can use to get autocompletion and validation in your editor:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"$schema": "https://playground.wordpress.net/blueprint-schema.json",
	"landingPage": "/wp-admin/",
	// ...
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Preferred Versions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <code>preferredVersions</code> property, unsurprisingly, declares the preferred of PHP and WordPress versions to use. It can contain the following properties:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><code>php</code> (string): The preferred PHP version to use. Defaults to "latest". Only accepts major versions, like "7.4" or "8.0". Minor versions like "7.4.1" are not supported.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>wp</code> (string): Loads the specified WordPress version. Supported values: The last three major WordPress versions—minor versions, like <code>6.5.1</code>, are not supported. As of April 4, 2024, that's <code>6.3</code>, <code>6.4</code>, <code>6.5</code>. You can also use these values: <code>latest</code> (default), <code>nightly</code>, or <code>beta</code>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">PHP extensions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <code>phpExtensionBundles</code> property is an array of PHP extension bundles to load. The following bundles are supported:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><code>light</code>: Default choice. Saves 6MB of downloads, loads none of the extensions below.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>kitchen-sink</code>: Installs <a href="https://www.php.net/manual/en/book.image.php"><code>gd</code></a>, <a href="https://www.php.net/manual/en/mbstring.installation.php"><code>mbstring</code></a>, <a href="https://www.php.net/manual/en/function.iconv.php"><code>iconv</code></a>, <a href="https://www.php.net/manual/en/book.openssl.php"><code>openssl</code></a>, <a href="https://www.php.net/manual/en/book.libxml.php"><code>libxml</code></a>, <a href="https://www.php.net/manual/en/xml.installation.php"><code>xml</code></a>, <a href="https://www.php.net/manual/en/intro.dom.php"><code>dom</code></a>, <a href="https://www.php.net/manual/en/book.simplexml.php"><code>simplexml</code></a>, <a href="https://www.php.net/manual/en/book.xmlreader.php"><code>xmlreader</code></a>, <a href="https://www.php.net/manual/en/book.xmlwriter.php"><code>xmlwriter</code></a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Features</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <code>features</code> property is used to enable or disable certain features of the Playground. It can contain the following properties:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><code>networking</code>: Defaults to <code>false</code>. Enables or disables the networking support for Playground. If enabled, <a href="https://developer.wordpress.org/reference/functions/wp_safe_remote_get/"><code>wp_safe_remote_get</code></a> and similar WordPress functions will actually use <code>fetch()</code> to make HTTP requests. If disabled, they will immediately fail instead.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>23</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[07-wasm-asyncify.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=24</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Asyncify</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://emscripten.org/docs/porting/asyncify.html">Asyncify</a> lets synchronous C or C++ code interact with asynchronous JavaScript. Technically, it saves the entire C call stack before yielding control back to JavaScript, and then restores it when the asynchronous call is finished. This is called <strong>stack switching</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Networking support in the WebAssembly PHP build is implemented using Asyncify. When PHP makes a network request, it yields control back to JavaScript, which makes the request, and then resumes PHP when the response is ready. It works well enough that PHP build can request web APIs, install composer packages, and even connect to a MySQL server.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Asyncify crashes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Stack switching requires wrapping all C functions that may be found at a call stack at a time of making an asynchronous call. Blanket-wrapping of every single C function adds a <strong>significant</strong> overhead, which is why we maintain a list of specific function names:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>https://github.com/WordPress/wordpress-playground/blob/15a660940ee9b4a332965ba2a987f6fda0c159b1/packages/php-wasm/compile/Dockerfile#L624-L632</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unfortunately, missing even a single item from that list results in a WebAssembly crash whenever that function is a part of the call stack when an asynchronous call is made. It looks like this:</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="../../static/img/asyncify-error.png" alt=""/><figcaption class="wp-element-caption">A screenshot of an asyncify error in the terminal</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Asyncify can auto-list all the required C functions when built without <code>ASYNCIFY_ONLY</code>, but that auto-detection is overeager and ends up listing about 70,000 C functions which increases the startup time to 4.5s. That's why we maintain the list manually.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you are interested in more details, <a href="https://github.com/WordPress/wordpress-playground/issues/251">see GitHub issue 251</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Fixing Asyncify crashes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://github.com/WordPress/wordpress-playground/pull/253">Pull Request 253</a> adds a <code>fix-asyncify</code> command that runs a specialized test suite and automatically adds any identified missing C functions to the <code>ASYNCIFY_ONLY</code> list.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you run into a crash like the one above, you can fix it by:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol class="wp-block-list"><!-- wp:list-item -->
<li>Identifying a PHP code path that triggers the crash – the stack trace in the terminal should help with that.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Adding a test case that triggers a crash to <code>packages/php-wasm/node/src/test/php-asyncify.spec.ts</code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Running: <code>npm run fix-asyncify</code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Committing the test case, the updated Dockerfile, and the rebuilt PHP.wasm</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">The upcoming JSPI API will make Asyncify unnecessary</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Eventually, <a href="https://github.com/WordPress/wordpress-playground/issues/134">V8 will likely handle stack switching for us</a> and remove this problem entirely. <a href="https://github.com/WordPress/wordpress-playground/issues/134">Issue 134</a> tracks the status of that effort.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's <a href="https://github.com/fgmccabe">a relevant note</a> from @fgmccabe:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><!-- wp:paragraph -->
<p>The current implementation in V8 is essentially 'experimental status'. We have arm64 and x64 implementations.<br>The next steps are to implement on 32 bit arm/intel. That requires us to solve some issues that we did not have to solve so far.<br>As for node.js, my guess is that it is already in node, behind a flag.<br>To remove the flag requirement involves getting other implementations. The best estimate for that is towards the end of this year; but it obviously depends on resources and funding.<br>In addition, it would need further progress in the standardization effort; but, given that it is a 'small' spec, that should not be a long term burden.<br>Hope that this helps you understand the roadmap :)</p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>24</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[20-documentation.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=25</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Documentation contributions</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://wordpress.github.io/wordpress-playground">WordPress Playground's documentation site</a> is maintained by volunteers like you, who'd love your help.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All <a href="https://github.com/WordPress/wordpress-playground/labels/%5BType%5D%20Documentation">documentation-related topics</a> are labeled <code>documentation</code>. Browse the list of open issues to find one you'd like to work on. Alternatively, if you believe something is missing from the current documentation, open an issue to discuss your suggestion.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">How can I contribute?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can contribute by <a href="https://github.com/WordPress/wordpress-playground/issues/new">opening an issue in the project repository</a> and describing what you'd like to add or change.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you feel up to it, write the content in the issue description, and the project contributors will take care of the rest.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">I'm familiar with markdown and GitHub</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you are familiar with markdown, you can propose changes and new documentation pages by submitting a Pull Request.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The documentation is stored in Playground's GitHub repository, <a href="https://github.com/WordPress/wordpress-playground/tree/trunk/packages/docs/site/docs">under <code>/packages/docs/site/docs</code></a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Edit in the browser</h2>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol class="wp-block-list"><!-- wp:list-item -->
<li>Find the page you'd like to edit or the directory of the chapter you'd like to add a new page to.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Click the <strong>Add Files</strong> button to add a new file, or click on an existing file and then click the pencil icon to edit it.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>GitHub will ask you to fork the repository and create a new branch with your changes.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>An editor will open where you can make the changes.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>When you're done, click the <strong>Commit Changes</strong> button and submit a Pull Request.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>That's it! You've just contributed to the WordPress Playground documentation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This approach means you don't need to clone the repository, set up a local development environment, or run any commands.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The downside is that you won't be able to preview your changes. Keep reading to learn how to review your changes before submitting a Pull Request.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Local preview</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Clone the repository and navigate to the directory on your device. Now run the following commands:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>npm install
npm run build:docs
npm run dev:docs
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The documentation site opens in a new browser tab and refreshes automatically with each change. Continue to edit the relevant file in your code editor and test the changes in real-time.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>25</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[13-browser-scopes.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=26</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Scopes</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Scopes keep your app working when you open it in two different browser tabs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Service Worker passes the intercepted HTTP requests to the PHPRequestHandler for rendering. Technically, it sends a message through a <a href="https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel"><code>BroadcastChannel</code></a> which then gets delivered to every browser tab where the application is open. This is undesirable, slow, and leads to unexpected behaviors.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unfortunately, the Service Worker cannot directly communicate with the relevant Worker Thread – see <a href="https://github.com/WordPress/wordpress-playground/pull/31">PR #31</a> and <a href="https://github.com/WordPress/wordpress-playground/issues/9">issue #9</a> for more details.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Scopes enable each browser tab to:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Brand the outgoing HTTP requests with a unique tab id</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Ignore any <code>BroadcastChannel</code> messages with a different id</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Technically, a scope is a string included in the <code>PHPRequestHandler.absoluteUrl</code>. For example:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>In an <strong>unscoped app</strong>, <code>/index.php</code> would be available at <code>http://localhost:8778/wp-login.php</code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>In an <strong>scoped app</strong>, <code>/index.php</code> would be available at <code>http://localhost:8778/scope:96253/wp-login.php</code></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The service worker is aware of this concept and will attach the <code>/scope:</code> found in the request URL to the related <code>BroadcastChannel</code> communication.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A worker thread initiated with a scoped <code>absoluteUrl</code> is said to be <strong>scoped</strong>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import {
	PHP,
	setURLScope,
	exposeAPI,
	parseWorkerStartupOptions,
} from '@php-wasm/web';

// Don't use the absoluteURL directly:
const absoluteURL = 'http://127.0.0.1'

// Instead, set the scope first:
const scope = Math.random().toFixed(16)
const scopedURL = setURLScope(absoluteURL, scope).toString()

const { phpVersion } = parseWorkerStartupOptions&lt;{ phpVersion?: string }>();
const php = await PHP.load('8.0', {
	requestHandler: {
		documentRoot: '/',
		absoluteUrl: scopedSiteUrl
	}
});

// Expose the API to app.ts:
const &#91;setApiReady, ] = exposeAPI( php );
setApiReady();
</code></pre>
<!-- /wp:code -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>26</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[02-api-concepts.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=27</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Playground APIs Concepts</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground in the browser is all about links and iframes. Regardless of which API you choose, you will use it in one of the following ways:</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Link to the Playground site</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can customize WordPress Playground by modifying the https://playground.wordpress.net/ link. You can, for example, create a post, request a specific plugin, or run any PHP code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To prepare such a link, use either the <a href="../08-query-api/01-index.md">Query API</a> (easy) or the <a href="../09-blueprints-api/01-index.md">JSON Blueprints API</a> (medium).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once it's ready, simply post it on your site. It makes a great "Try it yourself" button in a tutorial, for example.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Embed in an <code>&lt;iframe></code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground can be embedded in your app using an <code>&lt;iframe></code>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><iframe src="https://playground.wordpress.net/">
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>To customize that Playground instance, you can:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Load it from special link prepared using the <a href="../08-query-api/01-index.md">Query API</a> (easy) or the <a href="../09-blueprints-api/01-index.md">JSON Blueprints API</a> (medium).</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Control it using the <a href="../10-javascript-api/01-index.md">JavaScript API</a>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The JavaScript API gives you the most control, but it is also the least convenient option as it requires loading the Playground Client library.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import PlaygroundWpNetWarning from '@site/docs/_fragments/_playground_wp_net_may_stop_working.md';</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<PlaygroundWpNetWarning />
<!-- /wp:html -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Browser APIs</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following Playground APIs are available in the browser:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import APIList from '@site/docs/_fragments/_api_list.mdx';</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<APIList />
<!-- /wp:html -->

<!-- wp:heading -->
<h2 class="wp-block-heading">In Node.js</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The following Playground APIs are available in Node.js:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><a href="../09-blueprints-api/01-index.md">JSON Blueprints API</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="../10-javascript-api/01-index.md">JavaScript API</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>These APIs are very similar to their web counterparts, but, unsurprisingly, they are not based or links or iframes.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>27</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[09-contributor-day.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=28</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">WordCamp Contributor Day</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <a href="https://marketplace.visualstudio.com/items?itemName=WordPressPlayground.wordpress-playground">WordPress Playground VS Code extension</a> and <a href="https://www.npmjs.com/package/@wp-now/wp-now">wp-now</a> streamline the process of setting up a local WordPress environment. WordPress Playground powers both—no Docker, MySQL, or Apache required.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Keep reading to learn how to use these tools for <a href="../05-local-development/01-wp-now.md">local development</a> when contributing to WordPress. Please note that the extension and the NPM package are under development, and not all <a href="https://make.wordpress.org/">Make WordPress teams</a> are fully supported.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Getting Started</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you’re a visual learner, here’s a step-by-step video tutorial. If you prefer reading at your own pace, skip to the written instructions below.</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<iframe title="Getting Started with wp-now for WordPress development at Contributor Day" width="752" height="423" src="https://video.wordpress.com/embed/Gn7XOCAM?cover=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1&amp;metadata_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJ3b3JkcHJlc3MuY29tIiwiaWF0IjoxNjg2MTQ4ODQ5LCJleHAiOjE2ODYzMjE2NDksImJsb2dfaWQiOiIyMDMxMjIxMTIiLCJndWlkIjoiR243WE9DQU0iLCJhdXRoIjoidmlkZW9wcmVzc19wbGF5YmFja190b2tlbiIsImFjY2VzcyI6InZpZGVvIiwiZXhwaXJlcyI6MTY4NjMyMTY0OX0.DJWVfePHl2nUKo8ziG81CK2VlG5Ui8vNg-dZJ7dOSq8" allow="fullscreen" loading="eager"></iframe>
<!-- /wp:html -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">VS Code Playground extension</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <a href="https://marketplace.visualstudio.com/items?itemName=WordPressPlayground.wordpress-playground">Visual Studio Code Playground extension</a> is a friendly zero-setup development environment.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol class="wp-block-list"><!-- wp:list-item -->
<li>Open VS Code and navigate to the <strong>Extensions</strong> tab (<strong>View > Extensions</strong>).</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>In the search bar, type <em>WordPress Playground</em> and click <strong>Install</strong>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>To interact with Playground, click the new icon in the <strong>Activity Bar</strong> and hit the <strong>Start WordPress Server</strong> button.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>A new tab will open in your browser within seconds.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">wp-now NPM package</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>@wp-now/wp-now</code> is a CLI tool that allows you to spin up a WordPress site with a single command. No Docker, MySQL, or Apache are required.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Prerequisites</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>wp-now</code> requires Node.js and NPM. If you haven’t yet, <a href="https://nodejs.org/en/download">download and install</a> both before you begin.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Depending on the Make WordPress team you contribute to, you may need a different Node.js version than the one you have installed. You can use Node Version Manager (NVM) to switch between versions. <a href="https://github.com/nvm-sh/nvm#installing-and-updating">Find the installation guide here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Run wp-now</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You don’t have to install <code>wp-now</code> on your device to use it. Navigate to your plugin or theme directory and start <code>wp-now</code> with the following commands:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>cd my-plugin-or-theme-directory
npx @wp-now/wp-now start
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Ideas for contributors</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Create a Gutenberg Pull Request (PR)</h3>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol class="wp-block-list"><!-- wp:list-item -->
<li>Fork the <a href="https://github.com/WordPress/gutenberg">Gutenberg repository</a> in your GitHub account.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Then, clone the forked repository to download the files.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Install the necessary dependencies and build the code in development mode.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:code -->
<pre class="wp-block-code"><code>git clone git@github.com:WordPress/gutenberg.git
cd gutenberg
npm install
npm run dev
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>:::info</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you’re unsure about the steps listed above, visit the official <a href="https://developer.wordpress.org/block-editor/contributors/">Gutenberg Project Contributor Guide</a>. Note that in this case, <code>wp-now</code> replaces <code>wp-env</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Open a new terminal terminal tab, navigate to the Gutenberg directory, and start WordPress using <code>wp-now</code>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>cd gutenberg
npx @wp-now/wp-now start
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>When you’re ready, commit and push your changes to your forked repository on GitHub and open a Pull Request on the Gutenberg repository.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Test a Gutenberg PR</h3>
<!-- /wp:heading -->

<!-- wp:list {"ordered":true} -->
<ol class="wp-block-list"><!-- wp:list-item -->
<li>To test other Gutenberg PRs, checkout the branch associated with it.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Pull the latest changes to ensure your local copy is up to date.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Next, install the necessary dependencies, ensuring your testing environment matches the latest changes.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Finally, build the code in development mode.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:code -->
<pre class="wp-block-code"><code># copy the branch-name from GitHub #
git checkout branch-name
git pull
npm install
npm run dev

# In a different terminal inside the Gutenberg directory *
npx @wp-now/wp-now start
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Test a Gutenberg PR with Playground in the browser</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You don’t need a local development environment to test Gutenberg PRs—use Playground to do it directly in the browser.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol class="wp-block-list"><!-- wp:list-item -->
<li>Copy the ID of the PR you’d like to test (pick one from the <a href="https://github.com/WordPress/gutenberg/pulls">list of open Pull Requests</a>).</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Open Playground’s <a href="https://playground.wordpress.net/gutenberg.html">Gutenberg PR Previewer</a> and paste the ID you copied.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Once you click <strong>Go</strong>, Playground will verify the PR is valid and open a new tab with the relevant PR, allowing you to review the proposed changes.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Translate WordPress Plugins with Playground in the browser</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can translate supported WordPress Plugins by loading the plugin you want to translate and use Inline Translation. If the plugin developers have added the option, you'll find the <strong>Translate Live</strong> link on the top right toolbar of the translation view. You can read more about this exciting new option on <a href="https://make.wordpress.org/polyglots/2023/05/08/translate-live-updates-to-the-translation-playground/">this Polyglots blog post</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Get help and contribute to WordPress Playground</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Have a question or an idea for a new feature? Found a bug? Something’s not working as expected? We’re here to help:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>During Contributor Day, you can reach us at the <strong>Playground table</strong>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Open an issue on the <a href="https://github.com/WordPress/wordpress-playground/issues/new">WordPress Playground GitHub repository</a>. If your focus is the VS Code extension, NPM package, or the plugins, open an issue on the <a href="https://github.com/WordPress/playground-tools/issues/new">Plaground Tools repository</a>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Share your feedback on the <a href="https://wordpress.slack.com/archives/C04EWKGDJ0K"><strong>#meta-playground</strong> Slack channel</a>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>28</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[08-browser-concepts.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=29</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Running PHP apps in the browser with ServiceWorkers and Worker Threads</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>On a high level, WordPress Playground works in web browsers as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>The <code>index.html</code> file on playground.wordpress.net loads the <code>remote.html</code> file via an <code>&lt;iframe src="/remote.html"></code>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>remote.html</code> starts a Worker Thread and a ServiceWorker and sends back the download progress information.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The Worker Thread starts PHP and populates the filesystem with a WordPress patched to run on SQLite.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The ServiceWorker starts intercepting all HTTP requests and forwarding them to the Worker Thread.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>remote.html</code> creates an <code>&lt;iframe src="/index.php"></code>, and the Service Worker forwards the <code>index.php</code> request to the Worker Thread where the WordPress homepage is rendered.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Visually, it looks like this:</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="@site/static/img/architecture-overview.png" alt=""/><figcaption class="wp-element-caption">Architecture overview</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 class="wp-block-heading">High-level ideas</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <a href="https://github.com/WordPress/wordpress-playground/blob/trunk/packages/php-wasm/web/"><code>@php-wasm/web</code></a> is built on top of the following ideas:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><a href="./09-browser-tab-orchestrates-execution.md"><strong>Browser tab orchestrates everything</strong></a> – The browser tab is the main program. Closing or reloading it means destroying the entire execution environment.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="./10-browser-iframe-rendering.md"><strong>Iframe-based rendering</strong></a> – Every response produced by the PHP server must be rendered in an iframe to avoid reloading the browser tab when the user clicks on a link.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="./11-browser-php-worker-threads.md"><strong>PHP Worker Thread</strong></a> – The PHP server is slow and must run in a web worker, otherwise handling requests freezes the website UI.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="./12-browser-service-workers.md"><strong>Service Worker routing</strong></a> – All HTTP requests originating in that iframe must be intercepted by a Service worker and passed on to the PHP worker thread for rendering.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>29</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[03-coding-standards.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=30</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Coding principles</h1>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Error messages</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A good error message tells the user what to do next. Any ambiguity in errors thrown by Playground public APIs will prompt the developers to open issues.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Consider a network error, for example—can we infer the type of error and display a relevant message summarizing the next steps?</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><strong>Network error</strong>: "Your internet connection twitched. Try to reload the page.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>404</strong>: "Could not find the file".</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>403</strong>: "The server blocked access to the file".</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>CORS</strong>: clarify it's a browser security feature and add a link to a detailed explanation (on MDN or another reliable source). Suggest the user move their file somewhere else, like raw.githubusercontent.com, and link to a resource explaining how to set up CORS headers on their servers.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>We handle code formatting and linting automatically. Relax, type away, and let the machines do the work.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Public API</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Playground aims to keep the narrowest possible API scope.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Public APIs are easy to add and hard to remove. It only takes one PR to introduce a new API, but it may take a thousand to remove it, especially if other projects have already consumed it.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Don't expose unnecessary function, class, constant, or other components.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Blueprints</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Blueprints are the primary way to interact with Playground. These JSON files describe a set of steps that Playground executes in order.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Guidelines</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Blueprint steps should be <strong>concise and focused</strong>. They should do one thing and do it well.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>If you need to create a new step, try refactoring an existing one first.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>If that's not enough, ensure the new step delivers a new capability. Don't replicate the functionality of existing steps.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Assume the step would be called more than once.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Assume it would run in a specific order.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Add unit tests to verify that.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Blueprints should be <strong>intuitive and straightforward</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Don't require arguments that can be optional.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Use plain argument. For example, <code>slug</code> instead of <code>path</code>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Define constants in virtual JSON files—don't modify PHP files.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Define a TypeScript type for the Blueprint. That's how Playground generates its JSON schema.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Write a function to handle a Blueprint step. Accept the argument of the type you defined.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Provide a usage example in the doc string. It's automatically reflected in the docs.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>30</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[02-wasm-php-overview.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=31</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">WebAssembly PHP</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress Playground build <a href="https://github.com/php/php-src">the PHP interpreter</a> to WebAssembly using <a href="https://emscripten.org/docs/porting/networking.html">Emscripten</a> and a <a href="https://github.com/WordPress/wordpress-playground/blob/0d451c33936a8db5b7a158fa8aad288c19370a7d/packages/php-wasm/compile/Dockerfile">dedicated pipeline</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="@site/static/img/c-programs-general.png" alt=""/><figcaption class="wp-element-caption">Building C programs to WebAssembly</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Building PHP to WebAssembly is very similar to building vanilla PHP. The wasm build required <a href="https://github.com/WordPress/wordpress-playground/blob/0d451c33936a8db5b7a158fa8aad288c19370a7d/packages/php-wasm/compile/build-assets/php7.1.patch#L8-L9">adjusting a function signature here</a>, <a href="https://github.com/WordPress/wordpress-playground/blob/0d451c33936a8db5b7a158fa8aad288c19370a7d/packages/php-wasm/compile/Dockerfile#L495">forcing a config variable there</a>, and applying <a href="https://github.com/WordPress/wordpress-playground/tree/0d451c33936a8db5b7a158fa8aad288c19370a7d/packages/php-wasm/compile/build-assets">a few small patches</a>, but there's relatively few adjustments involved.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="@site/static/img/c-programs-php.png" alt=""/><figcaption class="wp-element-caption">Building PHP to WebAssembly</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>However, vanilla PHP builds aren't very useful in the browser. As a server software, PHP doesn't have a JavaScript API to pass the request body, upload files, or populate the <code>php://stdin</code> stream. WordPress Playground had to build one from scratch. The WebAssembly binary comes with a <a href="https://github.com/WordPress/wordpress-playground/blob/0d451c33936a8db5b7a158fa8aad288c19370a7d/packages/php-wasm/compile/build-assets/php_wasm.c">dedicated PHP API module</a> written in C and a <a href="https://github.com/WordPress/wordpress-playground/blob/da38192af57a95699d8731c855b82ac0222df61b/packages/php-wasm/common/src/lib/php.ts">JavaScript PHP class</a> that exposes methods like writeFile() or run().</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because every PHP version is just a static .wasm file, the PHP version switcher is actually pretty boring. It simply tells the browser to download, for example, <code>php_7_3.wasm</code> instead of, say, <code>php_8_2.wasm</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="@site/static/img/c-programs-php-versions.png" alt=""/><figcaption class="wp-element-caption">Building different versions of PHP to WebAssembly</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Networking support varies between platforms</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When it comes to networking, WebAssembly programs are limited to calling JavaScript APIs. It is a safety feature, but also presents a challenge. How do you support low-level, synchronous networking code used by PHP with the high-level asynchronous APIs available in JavaScript?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In Node.js, the answer involves a WebSocket to TCP socket proxy, <a href="https://emscripten.org/docs/porting/asyncify.html">Asyncify</a>, and patching deep PHP internals like php_select. It's complex, but there's a reward. The Node.js-targeted PHP build can request web APIs, install composer packages, and even connect to a MySQL server.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the browser, networking is supported to a limited extent. Network calls initiated using <code>wp_safe_remote_get</code>, like the ones in the plugin directory or the font library, are translated into <code>fetch()</code> calls and succeed if the remote server sends the correct CORS headers. However, a full support for arbitrary HTTPS connection involves opening a raw TCP socket which is not possible in the browser. There is an <a href="https://github.com/WordPress/wordpress-playground/issues/85">open GitHub issue</a> that explores possible ways of addressing this problem.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>31</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[17-browser-wordpress.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=32</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Bundling WordPress for the browser</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <a href="https://github.com/WordPress/wordpress-playground/blob/trunk/src/wordpress-playground/wordpress/Dockerfile">web bundler Dockerfile</a> turns a vanilla WordPress into a browser-optimized one:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Makes WordPress run on SQLite using the <a href="https://github.com/WordPress/sqlite-database-integration">official drop-in plugin</a> as MySQL is unsupported in the browser.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Reduces the WordPress website size from about 70MB to about 10MB, or 5MB compressed.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Runs the WordPress installation wizard.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Bundles WordPress as a <a href="./06-wasm-php-data-dependencies.md">data dependency</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Build a new bundle with <code>nx bundle-wordpress playground-wordpress-builds --wp-version=&lt;version></code>, e.g.:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>nx bundle-wordpress playground-wordpress-builds --wp-version=6.1
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The bundler outputs:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><code>packages/playground/wordpress-builds/public/wp-6.1.zip</code> – zipped WordPress files</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>packages/playground/wordpress-builds/public/wp-6.1/</code> – a directory with static assets for the specified WordPress versions</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Consult <a href="https://github.com/WordPress/wordpress-playground/blob/trunk/src/wordpress-playground/wordpress/Dockerfile">the web bundler Dockerfile</a> for more details (like the list of supported WordPress versions) and modify it to customize the default WordPress installation.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>32</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[03-php-wasm-node.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=33</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Using WordPress Playground in Node.js</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As a WebAssembly project, you can also use WordPress Playground in Node.js.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you need low-level control over the underlying WebAssembly PHP build, take a look at the <a href="https://npmjs.org/@php-wasm/node"><code>@php-wasm/node</code> package</a> which ships the PHP WebAssembly runtime. This package is at the core of all WordPress Playground tools for Node.js.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::info <strong>API reference</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Consult the <a href="/api/node">complete list</a> of Classes, Functions, Interfaces, and Type Aliases.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import PHPWASMNode from '@php-wasm/node/\README.md';</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<PHPWASMNode />
<!-- /wp:html -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[02-using-blueprints.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=34</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Using Blueprints</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can use Blueprints in one of two ways:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>By passing them as a URL fragment to the Playground.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>By using the JavaScript API.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">URL Fragment</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The easiest way to start using Blueprints is to paste one into the URL "fragment" on WordPress Playground website, e.g. <code>https://playground.wordpress.net/#{"preferredVersions...</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, to create a Playground with specific versions of WordPress and PHP you would use the following Blueprint:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"$schema": "https://playground.wordpress.net/blueprint-schema.json",
	"preferredVersions": {
		"php": "7.4",
		"wp": "6.5"
	}
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>And then you would go to<br><code>https://playground.wordpress.net/#{"preferredVersions": {"php":"7.4", "wp":"6.5"}}</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You won't have to paste links to follow along. We'll use code examples with a "Try it out" button that will automatically run the examples for you:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import BlueprintExample from '@site/src/components/Blueprints/BlueprintExample.mdx';</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><blueprintexample justbutton="{true}" blueprint="{{<br">"preferredVersions": {<br>"php": "7.4",<br>"wp": "6.5"<br>}<br>}} /></blueprintexample></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Base64 encoded Blueprints</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Some tools, including GitHub, might not format the Blueprint correctly when pasted into the URL. In such cases, encode your Blueprint in Base64 and append it to the URL. For example, that's the above Blueprint in Base64 format: <code>eyIkc2NoZW1hIjogImh0dHBzOi8vcGxheWdyb3VuZC53b3JkcHJlc3MubmV0L2JsdWVwcmludC1zY2hlbWEuanNvbiIsInByZWZlcnJlZFZlcnNpb25zIjogeyJwaHAiOiAiNy40Iiwid3AiOiAiNi41In19</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run it, go to https://playground.wordpress.net/#eyIkc2NoZW1hIjogImh0dHBzOi8vcGxheWdyb3VuZC53b3JkcHJlc3MubmV0L2JsdWVwcmludC1zY2hlbWEuanNvbiIsInByZWZlcnJlZFZlcnNpb25zIjogeyJwaHAiOiAiNy40Iiwid3AiOiAiNi41In19</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Load Blueprint from a URL</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When your Blueprint gets too wieldy, you can load it via the <code>?blueprint-url</code> query parameter in the URL, like this:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://playground.wordpress.net/?blueprint-url=https://raw.githubusercontent.com/adamziel/blueprints/trunk/blueprints/latest-gutenberg/blueprint.json">https://playground.wordpress.net/?blueprint-url=https://raw.githubusercontent.com/adamziel/blueprints/trunk/blueprints/latest-gutenberg/blueprint.json</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that the Blueprint must be publicly accessible and served with <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin">the correct <code>Access-Control-Allow-Origin</code> header</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Access-Control-Allow-Origin: *
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">JavaScript API</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can also use Blueprints with the JavaScript API using the <code>startPlaygroundWeb()</code> function from the <code>@wp-playground/client</code> package. Here's a small, self-contained example you can run on JSFiddle or CodePen:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><iframe id="wp-playground" style="width: 1200px; height: 800px">
<script><br>	import { startPlaygroundWeb } from 'https://playground.wordpress.net/client/index.js';<br><br>	const client = await startPlaygroundWeb({<br>		iframe: document.getElementById('wp-playground'),<br>		remoteUrl: `https://playground.wordpress.net/remote.html`,<br>		blueprint: {<br>			landingPage: '/wp-admin/',<br>			preferredVersions: {<br>				php: '8.0',<br>				wp: 'latest',<br>			},<br>			steps: &#91;<br>				{<br>					step: 'login',<br>					username: 'admin',<br>					password: 'password',<br>				},<br>				{<br>					step: 'installPlugin',<br>					pluginZipFile: {<br>						resource: 'wordpress.org/plugins',<br>						slug: 'friends',<br>					},<br>				},<br>			],<br>		},<br>	});<br><br>	const response = await client.run({<br>		// wp-load.php is only required if you want to interact with WordPress.<br>		code: '<?php require_once "/wordpress/wp-load.php"; $posts = get_posts(); echo "Post Title: " . $posts&#91;0]->post_title;',<br>	});<br>	console.log(response.text);<br></script>
</code></pre>
<!-- /wp:code -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>34</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[05-steps-shorthands.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=35</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Shorthands</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can specify some <code>steps</code> using a <code>shorthand</code> syntax. The following <code>steps</code> are currently supported:</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading"><code>login</code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Use</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>	"login": true,
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Or</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"step": "login",
	"username": "admin",
	"password": "password"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading"><code>plugins</code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>(replaces the <code>installPlugin</code> step)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Use</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>	"plugins": &#91;
		"hello-dolly",
		"https://raw.githubusercontent.com/adamziel/blueprints/trunk/docs/assets/hello-from-the-dashboard.zip"
	]
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Or</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&#91;
	{
		"step": "installPlugin",
		"pluginZipFile": {
			"resource": "wordpress.org/plugins",
			"slug": "hello-dolly"
		}
	},
	{
		"step": "installPlugin",
		"pluginZipFile": {
			"resource": "url",
			"url": "https://raw.githubusercontent.com/adamziel/blueprints/trunk/docs/assets/hello-from-the-dashboard.zip"
		}
	}
]
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading"><code>siteOptions</code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Use</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>	"siteOptions": {
		"blogname": "My first Blueprint"
	}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Or</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>	"step": "setSiteOptions",
	"options": {
		"blogname": "My first Blueprint"
	}
</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading"><code>defineWpConfigConsts</code></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>(<code>constants</code> only)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Use</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
	"step": "defineWpConfigConsts",
	"consts": {
		"WP_DISABLE_FATAL_ERROR_HANDLER": true,
		"WP_DEBUG": true,
		"WP_DEBUG_DISPLAY": true
	}
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Or</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>	{
		"step": "defineWpConfigConsts",
		"consts": {
			"WP_DISABLE_FATAL_ERROR_HANDLER": true
		}
	},
	{
		"step": "defineWpConfigConsts",
		"consts": {
			"WP_DEBUG": true
		}
	},
	{
		"step": "defineWpConfigConsts",
		"consts": {
			"WP_DEBUG_DISPLAY": true
		}
	}
</code></pre>
<!-- /wp:code -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity"/>
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The <code>shorthand</code> syntax and the <code>step</code> syntax correspond to each other. Every <code>step</code> specified with the <code>shorthand</code> syntax is added to the top of the <code>steps</code> array in arbitrary order.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::info <strong>Which should you choose?</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Use <code>shorthands</code> when <strong>brevity</strong> is your main concern.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Use explicit <code>steps</code> when you need more control over the <strong>execution order</strong>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[03-wasm-php-compiling.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=36</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Compiling PHP</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The build pipeline lives in a <a href="https://github.com/WordPress/wordpress-playground/blob/trunk/src/packages/php-wasm/compile/Dockerfile"><code>Dockerfile</code></a>. It was originally forked from <a href="https://github.com/seanmorris/php-wasm">seanmorris/php-wasm</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In broad strokes, that <code>Dockerfile</code>:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Installs all the necessary linux packages (like <code>build-essential</code>)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Downloads PHP and the required libraries, e.g. <code>sqlite3</code>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Applies a few patches.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Compiles everything using <a href="https://emscripten.org/">Emscripten</a>, a drop-in replacement for the C compiler.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Compiles <code>php_wasm.c</code> – a convenient API for JavaScript.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Outputs a <code>php.wasm</code> file and one or more JavaScript loaders, depending on the configuration.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Transforms the Emscripten's default <code>php.js</code> output into an ESM module with additional features.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>To find out more about each step, refer directly to the <a href="https://github.com/WordPress/wordpress-playground/blob/trunk/src/packages/php-wasm/compile/Dockerfile">Dockerfile</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Building</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To build all PHP versions, run <code>nx recompile-php:all php-wasm-web</code> (or <code>php-wasm-node</code>) in the repository root. You'll find the output files in <code>packages/php-wasm/php-web/public</code>. To build a specific version, run <code>nx recompile-php:all php-wasm-node --PHP_VERSION=8.0</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP extensions</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PHP is built with several extensions listed in the <a href="https://github.com/WordPress/wordpress-playground/blob/trunk/src/packages/php-wasm/compile/Dockerfile"><code>Dockerfile</code></a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some extensions, like <code>zip</code>, can be turned on or off during the build. Others, like <code>sqlite3</code>, are hardcoded.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you need to turn off one of the hardcoded extensions, feel free to open an issue in this repo. Better yet, this project needs contributors. You are more than welcome to open a PR and author the change you need.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">C API exposed to JavaScript</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The C API exposed to JavaScript lives in the <a href="https://github.com/WordPress/wordpress-playground/blob/trunk/src/packages/php-wasm/compile/build-assets/php_wasm.c"><code>php_wasm.c</code></a> file. The most important functions are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><code>void phpwasm_init()</code> – It creates a new PHP context and must be called before running any PHP code.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>int phpwasm_run(char *code)</code> – Runs a PHP script and writes the output to /tmp/stdout and /tmp/stderr. Returns the exit code.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>void phpwasm_refresh()</code> – Destroy the current PHP context and starts a new one. Call it after running one PHP script and before running another.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Refer to the inline documentation in <a href="https://github.com/WordPress/wordpress-playground/blob/trunk/src/packages/php-wasm/compile/build-assets/php_wasm.c"><code>php_wasm.c</code></a> to learn more.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Build configuration</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The build is configurable via the <a href="https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables---build-arg">Docker <code>--build-arg</code> feature</a>. You can set them up through the <code>build.js</code> script, just run this command to get the usage message:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>nx recompile-php php-wasm-web
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Supported build options:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><code>PHP_VERSION</code> – The PHP version to build, default: <code>8.0.24</code>. This value must point to an existing branch of the <a href="https://github.com/php/php-src.git">https://github.com/php/php-src.git</a> repository when prefixed with <code>PHP-</code>. For example, <code>7.4.0</code> is valid because the branch <code>PHP-7.4.0</code> exists, but just <code>7</code> is invalid because there's no branch <code>PHP-7</code>. The PHP versions that are known to work are <code>7.4.*</code> and <code>8.0.*</code>. Others likely work as well but they haven't been tried.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>EMSCRIPTEN_ENVIRONMENT</code> – <code>web</code> or <code>node</code>, default: <code>web</code>. The platform to build for. When building for <code>web</code>, two JavaScript loaders will be created: <code>php-web.js</code> and <code>php-webworker.js</code>. When building for Node.js, only one loader called <code>php-node.js</code> will be created.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>WITH_LIBXML</code> – <code>yes</code> or <code>no</code>, default: <code>no</code>. Whether to build with <code>libxml2</code> and the <code>dom</code>, <code>xml</code>, and <code>simplexml</code> PHP extensions (<code>DOMDocument</code>, <code>SimpleXML</code>, ..).</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>WITH_LIBZIP</code> – <code>yes</code> or <code>no</code>, default: <code>yes</code>. Whether to build with <code>zlib</code>, <code>libzip</code>, and the <code>zip</code> PHP extension (<code>ZipArchive</code>).</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>WITH_NODEFS</code> – <code>yes</code> or <code>no</code>, default: <code>no</code>. Whether to include <a href="https://emscripten.org/docs/api_reference/Filesystem-API.html#filesystem-api-nodefs">the Emscripten's NODEFS JavaScript library</a>. It's useful for loading files and mounting directories from the local filesystem when running php.wasm from Node.js.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>36</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[16-wordpress-database.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=37</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2 class="wp-block-heading">Database is supported via MySQL&lt;->SQLite translation layer</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>WordPress requires MySQL. However, there isn't a WebAssembly version of MySQL you could run in the browser. WordPress Playground therefore ships PHP with the <a href="https://www.php.net/manual/en/ref.pdo-sqlite.php">native SQLite driver</a> and leans on SQLite.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But how can WordPress run on a different database?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Behind the scenes, the official <a href="https://github.com/WordPress/sqlite-database-integration">SQLite Database Integration</a> plugin intercepts all MySQL queries and rewrites them in SQLite dialect. The 2.0 release ships <a href="https://github.com/WordPress/sqlite-database-integration/pull/9">a new WordPress Playground-informed translation layer</a> that allows WordPress on SQLite to pass 99% of the WordPress unit test suite.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[05-wasm-php-filesystem.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=38</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">PHP Filesystem</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The PHP module has its own filesystem separate from your computer's filesystem. It is provided by <a href="https://emscripten.org/docs/api_reference/Filesystem-API.html">Emscripten's FS library</a> and the default APIs is low-level and cumbersome to use. The <code>PHP</code> JavaScript class shipped with WordPress Playground wraps it with a more convenient higher-level API.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In general, WordPress Playground uses an in-memory virtual filesystem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, in Node.js, you can also mount a real directory from the host filesystem into the PHP filesystem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's how to interact with the filesystem in WordPress Playground:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>// Recursively create a /var/www directory
php.mkdirTree('/var/www');

console.log(php.fileExists('/var/www/file.txt'));
// false

php.writeFile('/var/www/file.txt', 'Hello from the filesystem!');

console.log(php.fileExists('/var/www/file.txt'));
// true

console.log(php.readFile('/var/www/file.txt'));
// "Hello from the filesystem!

// Delete the file:
php.unlink('/var/www/file.txt');
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>For more details consult the BasePHP class directly – it has some great documentation strings.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>38</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[02-vscode-extension.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=39</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">VS Code extension</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Start a zero-setup development environment using the <a href="https://marketplace.visualstudio.com/items?itemName=WordPressPlayground.wordpress-playground">VS Code extension</a>, and develop your plugin or theme locally without installing Apache or MySQL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::info <strong>Documentation</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The VS Code extension is maintained in a different GitHub repository, <a href="https://github.com/WordPress/playground-tools/">Playground Tools</a>. You can find the latest documentation in the <a href="https://github.com/WordPress/playground-tools/blob/trunk/packages/vscode-extension/README.md">dedicated README file</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The extension ships with a portable WebAssembly version of PHP and sets up WordPress to use SQLite. Once installed, all you have to do is click the <strong>Start WordPress Server</strong> button in VS Code:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import Image from '@theme/IdealImage';<br>import vsCodeScreenshot from '@site/static/img/start-wordpress-server.png';</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<div style={{maxWidth:350}}><Image img={vsCodeScreenshot} /></div>
<!-- /wp:html -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>39</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[03-playground-api-client.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=40</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Playground API Client</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <code>PlaygroundClient</code> object implements the <code>UniversalPHP</code> interface. All the methods from that interface are also available in Node.js and same-process PHP instances (Playground runs PHP in a web worker).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Broadly speaking, you can use the client to perform three types of operations:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Running PHP code</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Customizing PHP.ini</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Managing files and directories</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Running PHP code</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The two methods you can use to run PHP code are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><a href="#the-run-method"><code>run()</code></a> - runs PHP code and returns the output</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="#the-request-method"><code>request()</code></a> - makes an HTTP request to the website</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>In Node.js, you can also use the <a href="#the-cli-method"><code>cli()</code></a> method to run PHP in a CLI mode.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">The run() method</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>import TSDocstring from '@site/src/components/TSDocstring';</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><tsdocstring path="{[" ]}=""></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">The request() method</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><tsdocstring path="{[" ]}=""></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Customizing PHP.ini</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The API client also allows you to change the php.ini file:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>await setPhpIniEntries(client, {
	display_errors: 'On',
	error_reporting: 'E_ALL',
});
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Managing files and directories</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <code>client</code> object provides you with a low-level API for managing files and directories in the PHP filesystem:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>await client.mkdirTree('/wordpress/test');
// Create a new PHP file
await client.writeFile(
	'/wordpress/test/index.php',
	`     echo "Hello, world!
";
     // List all the files in current directory
     print_r(glob(__DIR__ . '/*'));
  `
);
// Create files named 1, 2, and 3
await client.writeFile('/wordpress/test/1', '');
await client.writeFile('/wordpress/test/2', '');
await client.writeFile('/wordpress/test/3', '');
// Remove the file named 1
await client.unlink('/wordpress/test/1');
// Navigate to our PHP file
await client.goTo('/test/index.php');
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>For a full list of these methods, consult the PlaygroundClient interface.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Sending messages to JavaScript</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can pass messages from PHP to JavaScript using the <code>post_message_to_js()</code> function. It accepts one argument:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><code>$data</code> (string) – Data to pass to JavaScript.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For example, here's how you would send a message with a JSON-encoded post ID and title:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>const php = await PHP.load('8.0');

php.onMessage(
	// The data is always passed as a string
	function (data: string) {
		// Let's decode and log the data:
		console.log(JSON.parse(data));
	}
);

// Now that we have a listener in place, let's
// dispatch a message:
await php.run({
	code: `        post_message_to_js(
            json_encode(&#91;
                'post_id' => '15',
                'post_title' => 'This is a blog post!'
            ])
        ));
    `,
});

// You will see the following output in the console:
// { post_id: '15', post_title: 'This is a blog post!' }
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">The cli() method</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In Node.js, you also have access to the <code>cli()</code> method that runs PHP in a CLI mode:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>// Run PHP in a CLI mode
client.cli(&#91;'-r', 'echo "Hello, world!";']);
// Outputs "Hello, world!"
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Once cli() method finishes running, the PHP instance is no* longer usable and should be discarded. This is because PHP internally cleans up all the resources and calls exit().</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>40</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[12-browser-service-workers.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=41</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Service Workers</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">A Service Worker</a> is used to handle the HTTP traffic using the in-browser PHPRequestHandler.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Imagine your PHP script renders the following page <a href="#iframe-based-rendering">in the iframe viewport</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>
	
		<title>John's Website</title>
	
	
		<a href="/">Homepage</a>
		<a href="/blog">Blog</a>
		<a href="/contact">Contact</a>
	

</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>When the user clicks, say the <code>Blog</code> link, the browser would normally send a HTTP request to the remote server to fetch the <code>/blog</code> page and then display it instead of the current iframe contents. However, our app isn't running on the remote server. The browser would just display a 404 page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Enter <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">Service Workers</a> – a tool to intercept the HTTP requests and handle them inside the browser:</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="@site/static/img/workers-diagram.png" alt=""/><figcaption class="wp-element-caption">Service worker data flow</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Service Worker setup</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The main application living in <code>/index.html</code> is responsible for registering the service worker.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's the minimal setup:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>/app.js:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import { registerServiceWorker } from '@php-wasm/web';

function main() {
	await registerServiceWorker(
		phpClient,
		"default", // PHP instance scope
		"/sw.js",  // Must point to a valid Service Worker implementation.
		"1"        // Service worker version, used for reloading the script.
	);

}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You will also need a separate <code>/service-worker.js</code> file that actually intercepts and routes the HTTP requests. Here's what a minimal implementation looks like:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>/service-worker.js</strong>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import { initializeServiceWorker } from '@php-wasm/web';

// Intercepts all HTTP traffic on the current domain and
// passes it to the Worker Thread.
initializeServiceWorker();
</code></pre>
<!-- /wp:code -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>41</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[10-browser-iframe-rendering.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=42</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Iframe-based rendering</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To avoid page reloads, all the <code>PHPRequestHandler</code> responses must be rendered in an iframe. Remember, the entire setup only lives as long as the main <code>index.html</code>. We want to avoid reloading the main app at all costs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In our app example above, <code>index.php</code> renders the following HTML:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><a href="page.php">Go to page.php</a>
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Imagine our <code>index.html</code> rendered it in a <code>&lt;div></code> instead of an <code>&lt;iframe></code>. As soon as you click on that link, the browser will try to navigate from <code>index.html</code> to <code>page.php</code>. However, <code>index.html</code> runs the entire PHP app, including the Worker Thread, the PHPRequestHandler, and the traffic control connecting them to the Service Worker. Navigating away from it would destroy the app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now, consider an iframe with the same link in it:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><iframe srcdoc="<a href=&quot;page.php&quot;&gt;Go to page.php</a&gt;">
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This time, click the link in the browser to load <code>page.php</code> <strong>inside the iframe</strong>. The top-level <code>index.html</code>, where the PHP application runs, remains unaffected. That's why iframes are crucial for the <code>@php-wasm/web</code> setup.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::info Crash reports<br>Playground doesn't collect crash reports automatically. Instead, it prompts users to submit a crash report when an instance fails to run in the browser.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The report includes a log, description, and a URL, and users can modify it before submitting it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <a href="https://github.com/WordPress/wordpress-playground/blob/trunk/packages/playground/website/public/logger.php">Logger API</a> handles it from there. This simple REST API validates the data and sends it to the <strong>Making WordPress</strong> <a href="https://wordpress.slack.com/archives/C06Q5DCKZ3L">#playground-logs Slack channel</a>.<br>:::</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Iframes caveats</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><code>target="_top"</code> isn't handled yet, so clicking links with <code>target="_top"</code> will reload the page you’re working on.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>JavaScript popups originating in the <code>iframe</code> may not always display.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>42</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[18-host-your-own-playground.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=43</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Host your own Playground</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can host the Playground on your own domain instead of <code>playground.wordpress.net</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is useful for having full control over its content and behavior, as well as removing dependency on a third-party server. It can provide a more customized user experience, for example: a playground with preinstalled plugins and themes, default site settings, or demo content.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Usage</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A self-hosted Playground can be embedded as an iframe.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><iframe src="https://my-playground.com">
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Or dynamically loaded by passing the remote URL to the Playground Client.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import { startPlaygroundWeb } from '@wp-playground/client';

const client = await startPlaygroundWeb({
	iframe: document.getElementById('wp'),
	remoteUrl: `https://my-playground.com/remote.html`,
});
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Static assets</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are several ways to get the static assets necessary to host the Playground.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In order of convenience and ease:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Download pre-built package</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Fork the repository and build with GitHub Action</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Build locally</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Download pre-built package</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To host the Playground as is, without making changes, you can download the built artifact from <a href="https://github.com/WordPress/wordpress-playground/actions/workflows/build-website.yml?query=is%3Asuccess">the latest successful GitHub Action</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Click on <strong>Deploy to playground.wordpress.net</strong>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>In the section <strong>Artifacts</strong> at the bottom of the page, click <code>playground-website</code>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>It's a zip package with the same files deployed to the public site.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Fork the repository and build with GitHub Action</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To customize the Playground, you can <a href="https://github.com/WordPress/wordpress-playground/fork">fork the Git repository</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Build it from the fork's GitHub page by going to: <strong>Actions -> Deploy to playground.wordpress.net -> Run workflow</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Build locally</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The most flexible and customizable method is to build the site locally.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Create a shallow clone of the Playground repository, or your own fork.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>git clone -b trunk --single-branch --depth 1 git@github.com:WordPress/wordpress-playground.git
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Enter the <code>wordpress-playground</code> directory.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>cd wordpress-playground
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Install dependencies, and build the website.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>npm install
npm run build:website
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This command internally runs the <code>nx</code> task <code>build:wasm-wordpress-net</code>. It copies the built assets from packages <code>remote</code> and <code>website</code> into a new folder at the following path:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>dist/packages/playground/wasm-wordpress-net
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The entire service of the Playground consists of the content of this folder.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Summary of included files</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The static assets include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Data and WASM files for all available PHP and WordPress versions</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>remote.html</code> - the core of Playground</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>index.html</code> - the shell, or browser chrome</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Web Worker script</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You can deploy the content of the folder to your server using SSH, such as <code>scp</code> or <code>rsync</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is a static site, except for these dynamic aspects.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Apache server directive <code>.htaccess</code> file from the package <code>remote</code></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For these to work, you need a server environment with Apache and PHP installed.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">NGINX configuration</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As an alternative to Apache, here is an example of using NGINX to serve the Playground.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::info Refer to the source file</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The example may be outdated. Please check <a href="https://github.com/WordPress/wordpress-playground/blob/trunk/packages/playground/remote/.htaccess">the source file</a> for the latest version.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The combined Apache <code>.htaccess</code> file looks like this.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>AddType application/wasm .wasm
AddType	application/octet-stream .data
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>An equivalent in NGINX.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>location ~* .wasm$ {
  types {
    application/wasm wasm;
  }
}

location ~* .data$ {
  types {
    application/octet-stream data;
  }
}

location /scope:.* {
  rewrite ^scope:.*?/(.*)$ $1 last;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You may need to adjust the above according to server specifics, particularly how to invoke PHP for the path <code>/plugin-proxy</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Customize bundled data</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The file <code>wp.zip</code> is a bundle of all the files for the virtual file system in Playground. There's a data file for each available WordPress version.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The package at <code>packages/playground/wordpress</code> is responsible for building these data files.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Edit the build script in <code>Dockerfile</code> to create a custom bundle that includes preinstalled plugins or content.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Install plugins</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here's an example of installing plugins for the data bundle.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Before the section titled <code>Strip whitespaces from PHP files</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># === Preinstall plugins ===

RUN cd wordpress/wp-content/mu-plugins &amp;&amp; \
    # Install plugins
    for plugin_name in example-plugin-1 example-plugin-2; do \
      curl -L https://downloads.wordpress.org/plugin/{$plugin_name}.latest-stable.zip -o {$plugin_name}.zip &amp;&amp; \
      unzip $plugin_file &amp;&amp; \
      rm $plugin_file &amp;&amp; \
      # Create entry file in mu-plugins root
      echo " $plugin_name.php; \
    done;
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You can download plugins from URLs other than the WordPress plugin directory, or use Git to pull them from elsewhere.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's also possible to copy from a local folder. For example, before <code>RUN</code>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>COPY ./build-assets/*.zip /root/
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Then put the plugin zip files in <code>build-assets</code>. In this case, you may want to add their paths to <code>.gitignore</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Import content</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here's an example of importing content.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># === Demo content ===

COPY ./build-assets/content.xml /root/
RUN cd wordpress ; \
     echo "Importing content.."; \
    ../wp-cli.phar --allow-root import /root/content.xml --authors=create
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This assumes that you have put a WXR export file named <code>content.xml</code> in the folder <code>build-assets</code>. You can add its path to <code>.gitignore</code>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>43</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[04-wasm-php-javascript-module.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=44</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">PHP.js JavaScript module</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <code>php.js</code> file generated by the <a href="./03-wasm-php-compiling.md">WebAssembly PHP build pipeline</a> is <strong>not</strong> a vanilla Emscripten module. Instead, it's an ESM module that wraps the regular Emscripten output and adds some extra functionality.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's the API it exposes:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>// php.wasm size in bytes:
export const dependenciesTotalSize = 5644199;

// php.wasm filename:
export const dependencyFilename = 'php.wasm';

// Run Emscripten's generated module:
export default function (jsEnv, emscriptenModuleArgs) {}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The generated JavaScript module is not meant for direct use. Instead, it can be consumed through the <code>PHP</code> class:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>// In Node.js:
const php = new PHP(await loadNodeRuntime('8.0'));

// On the web:
const php = new PHP(await loadWebRuntime('8.0'));
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Both of these classes extend the <code>BasePHP</code> class exposed by the <code>@php-wasm/universal</code> package and implement the <code>UniversalPHP</code> interface that standardizes the API across all PHP environments.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Loading the PHP runtime</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The load() method handles the entire PHP initialization pipeline. In particular, it:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Instantiates the Emscripten PHP module</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Wires it together with the data dependencies and loads them</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Ensures is all happens in a correct order</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Waits until the entire loading sequence is finished</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>44</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[06-wasm-php-data-dependencies.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=45</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Data dependencies (browser version)</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Importing file to PHP by manually calling <code>writeFile()</code> would be quite inconvenient. Fortunately, Emscripten provides a "data dependencies" feature.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Data dependencies consist of a <code>dependency.data</code> file and a <code>dependency.js</code> loader and can be packaged with the <a href="https://emscripten.org/docs/porting/files/packaging_files.html">file_packager.py tool</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>WordPress Playground also requires wrapping the Emscripten-generated <code>dependency.js</code> file in an ES module as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol class="wp-block-list"><!-- wp:list-item -->
<li>Prepend <code>export default function(emscriptenPHPModule) {'; </code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Prepend <code>export const dependencyFilename = '&lt;DATA FILE NAME>'; </code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Prepend <code>export const dependenciesTotalSize = &lt;DATA FILE SIZE>;</code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Append <code>}</code></li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Be sure to use the <code>--export-name="emscriptenPHPModule"</code> file_packager.py option.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You want the final output to look as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>export const dependenciesTotalSize = 5644199;
export const dependencyFilename = 'dependency.data';
export default function (emscriptenPHPModule) {
	// Emscripten-generated code:
	var Module = typeof emscriptenPHPModule !== 'undefined' ? emscriptenPHPModule : {};
	// ... the rest of it ...
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Such a constructions enables loading the <code>dependency.js</code> as an ES Module using<br><code>import("/dependency.js")</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once it's ready, you can load PHP and your data dependencies as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>const php = await PHP.load('7.4', {
	dataModules: &#91;import('/wp.js')],
});
</code></pre>
<!-- /wp:code -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>45</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[11-browser-php-worker-threads.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=46</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">PHP Worker Threads</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PHP is always ran in a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">web worker</a> to ensure the PHP runtime doesn't slow down the user interface of the main website.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Imagine the following code:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><button onclick="for(let i=0;i<100000000;i++&gt;) {}">Freeze the page</button>
<input type="text">
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As soon as you click that button the browser will freeze and you won't be able to type in the input. That's just how browsers work. Whether it's a for loop or a PHP server, running intensive tasks slows down the user interface.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Initiating web workers</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Web workers are separate programs that can process heavy tasks outside of the main application. They must be initiated by the main JavaScript program living in the browser tab. Here's how:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>const phpClient = consumeAPI<phpclient>(
	spawnPHPWorkerThread(
		'/worker-thread.js' // Valid Worker script URL
	)
);
await phpClient.isReady();
await phpClient.run({ code: `</phpclient></code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Controlling web workers</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Exchanging messages is the only way to control web workers. The main application has no access to functions or variables inside of a web workeer. It can only send and receive messages using <code>worker.postMessage</code> and <code>worker.onmessage = function(msg) { }</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This can be tedious, which is why Playground provides a convenient <a href="/api/web/function/consumeAPI">consumeAPI</a> function that abstracts the message exchange and exposes specific functions from the web worker. This is why we can call <code>phpClient.run</code> in the example above.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>46</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[07-json-api-and-function-api.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=47</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>https://github.com/WordPress/wordpress-playground/pull/215</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">JSON API and Function API</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Blueprints are defined in JSON format, but the underlying implementation uses JavaScript functions to execute the steps. While JSON is the most convenient way of interacting with Blueprints, you can also use the underlying functions directly.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>JSON is merely a wrapper around the functions. Whether you use the JSON steps or the exported functions, you'll have to provide the same parameters (except for the step name):</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>import BlueprintStep from '@site/src/components/BlueprintsAPI/BlueprintStep';<br>import { BlueprintSteps } from '@site/src/components/BlueprintsAPI/model';</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>&lt;span>{BlueprintSteps.map((name) => (<br>&lt;><br>&lt;BlueprintStep name={name} key={name} /></p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<hr/>
</>
))}</span>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>You can use Blueprints both with the web and the node.js versions of WordPress Playground.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Differences between JSON and Function APIs</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are two main differences between the JSON and Function APIs:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol class="wp-block-list"><!-- wp:list-item -->
<li>Blueprints handle the progress bar and error reporting for you. The function API requires you to handle these yourself.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The function API requires importing the API client library while Blueprints may be just pasted into the URL fragment.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>47</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[02-index-html-vs-remote-html.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=48</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading"><code>remote.html</code> vs <code>index.html</code></h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://playground.wordpress.net/">playground.wordpress.net</a> exposes two distinct APIs through two separate HTML files: <code>remote.html</code> and <code>index.html</code>. Here's an overview of their functions and differences:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li><code>index.html</code> uses WordPress Playground API client to control the "endpoint" that is <code>remote.html</code>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The <a href="../08-query-api/01-index.md">Query API</a> is exclusively provided by <code>index.html</code>, independent of the WordPress Playground JavaScript API.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The <a href="../10-javascript-api/01-index.md">JavaScript API</a> is exclusively provided by <code>remote.html</code>. Only that file can be used as an "endpoint" for the <code>PlaygroundClient</code> class.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Here's a bit more about each of these files:</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Remote.html</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>remote.html</code> runs and renders WordPress and also exposes an API for developers to control it. Importantly, <code>remote.html</code> does not render any UI elements, such as browser UI or version switchers. It's just WordPress. The primary functions of <code>remote.html</code> are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Loading the suitable version of php.wasm, the WebAssembly build of PHP.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Loading the correct version of WordPress for user interaction.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Initiating PHP in a WebWorker and registering a ServiceWorker for HTTP requests.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Listening to the <code>message</code> event from the parent window and executing the appropriate code command.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>That last part is how the public API works. The parent window (<code>index.html</code>) sends a message to the iframe (<code>remote.html</code>) with a command and arguments, and the iframe then executes that command and sends the result back with another message.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sending messages is cumbersome so the PlaygroundClient class provides an object-oriented API that handles the messages internally.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For quick testing and debugging, <code>remote.html</code> also exposes the JavaScript API client as <code>window.playground</code>. You can use it from your devtools as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>> await playground.listFiles("/")
(6) &#91;'tmp', 'home', 'dev', 'proc', 'internal', 'wordpress']
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>playground</code> is a class instance in this context and you will benefit from browser's autocompletion.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Index.html</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>index.html</code> is an independent app built around <code>remote.html</code> using the WordPress Playground API client.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It renders the browser UI, version selectors, and renders WordPress by embedding <code>remote.html</code> via an iframe. UI features like an address bar or a version selector are implemented by communicating with <code>remote.html</code> using <code>PlaygroundClient</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>index.html</code> monitors the query parameters it receives and triggers the appropriate <code>PlaygroundClient</code> methods. For instance, <code>?plugin=coblocks</code> triggers <code>installPluginsFromDirectory( client, ['coblocks'] )</code>. This mechanism forms the basis of the Query API.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For quick testing and debugging, <code>index.html</code> also exposes the JavaScript API client as <code>window.playground</code>. You can use it from your devtools as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>> await playground.listFiles("/")
(6) &#91;'tmp', 'home', 'dev', 'proc', 'internal', 'wordpress']
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Note that <code>playground</code> is a Proxy object in this context and you won't get any autocompletion from the browser.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>48</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[_playground_wp_net_may_stop_working.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=49</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>:::danger Careful with the demo site</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The site at https://playground.wordpress.net is there to support the community, but there are no guarantees it will continue to work if the traffic grows significantly.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you need certain availability, you should <a href="../11-architecture/18-host-your-own-playground.md">host your own WordPress Playground</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>49</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[04-blueprint-json-in-api-client.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=50</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Blueprints JSON and the API Client</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The Playground API client can be initialized with a <a href="../09-blueprints-api/01-index.md">JSON Blueprint</a>. This is a convenient way of preconfiguring it in any way you like without worrying about progress bars and fetching remote files:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import { startPlaygroundWeb } from 'https://playground.wordpress.net/client/index.js';

const client = await startPlaygroundWeb({
	iframe: document.getElementById('wp'),
	remoteUrl: `https://playground.wordpress.net/remote.html`,
	blueprint: {
		preferredVersions: {
			wp: '6.3',
			php: '8.0',
		},
		// Optional: downloads additional PHP extensions like DOMDocument, mbstring, etc.
		extensionBundles: &#91;'kitchen-sink'],
		steps: &#91;
			{ step: 'login' },
			{
				step: 'installPlugin',
				pluginZipFile: {
					resource: 'wordpress.org/plugins',
					slug: 'gutenberg',
				},
			},
		],
	},
});
await client.isReady();
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Running a JSON Blueprint is only possible during the initialization of the API client.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If this is sufficient for your needs, read more about <a href="../09-blueprints-api/01-index.md">JSON Blueprints</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you need to work with an already initialized client, you should look into <a href="./05-blueprint-functions-in-api-client.md">Blueprint functions</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>50</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[09-browser-tab-orchestrates-execution.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=51</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Browser tab orchestrates the execution</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The main <code>index.html</code> ties the entire application together. It starts all the concurrent processes and displays the PHP responses. The app only lives as long as the main <code>index.html</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Keep this point in mind as you read through the rest of the docs. At this point it may seem obvious, by the lines may get blurry later on. This package runs code outside of the browser tab using Web Workers, Service Workers, and, in the future, Shared Workers. Some of these workers may keep running even after the browser tab with <code>index.html</code> is closed.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Boot sequence</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here's what a boot sequence for a minimal app looks like:</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="@site/static/img/boot-sequence.png" alt=""/><figcaption class="wp-element-caption">The boot sequence</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The main app initiates the Iframe, the Service Worker, and the Worker Thread. Note how the main app doesn't use the PHP stack directly – it's all handled in the Worker Thread.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's what that boot sequence looks like in code:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>/index.html</strong>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code><script></script>
<iframe id="my-app">
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>/app.ts</strong>:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import { consumeAPI, PHPClient, registerServiceWorker, spawnPHPWorkerThread } from '@php-wasm/web';

const workerUrl = '/worker-thread.js';

export async function startApp() {
	const phpClient = consumeAPI<playgroundworkerendpoint>(
		await spawnPHPWorkerThread(
			workerUrl, // Valid Worker script URL
			{
				wpVersion: 'latest',
				phpVersion: '7.4', // Startup options
			}
		)
	);

	// Await the two-way communication channel
	await phpClient.isReady();

	// Must point to a valid Service Worker script:
	await registerServiceWorker(
		phpClient,
		'default', // PHP instance scope, keep reading to learn more.
		'/sw.js', // Valid Service Worker script URL.
		'1' // Service worker version, used for reloading the script.
	);

	// Create a few PHP files to browse:
	await workerThread.writeFile('/index.php', '<a href="page.php">Go to page.php</a>');
	await workerThread.writeFile('/page.php', '');

	// Navigate to index.php:
	document.getElementById('my-app').src = playground.pathToInternalUrl('/index.php');
}
startApp();
</playgroundworkerendpoint></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Keep reading to learn how all these pieces fit together.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Data flow</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here's what happens whenever the iframe issues a same-domain request:</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image"><img src="@site/static/img/data-flow.png" alt=""/><figcaption class="wp-element-caption">The data flow</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>A step-by-step breakdown:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol class="wp-block-list"><!-- wp:list-item -->
<li>The request is intercepted by the Service Worker</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The Service Worker passes it to the Worker Thread</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The Worker Thread calls <code>PHP.request</code> to convert that request to a response</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The Worker Thread passes the response to the Service Worker</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The Service Worker provides the browser with a response</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>At this point, if the request was triggered by user clicking on a link, the browser will render PHPRequestHandler's response inside the iframe.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>51</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[09-troubleshoot-and-debug-blueprints.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=52</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Troubleshoot and debug Blueprints</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When you build Blueprints, you might run into issues. Here are tips and tools to help you debug them:</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Review Common gotchas</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>Require <code>wp-load</code>: to run a WordPress PHP function using the <code>runPHP</code> step, you’d need to require <a href="https://github.com/WordPress/WordPress/blob/master/wp-load.php">wp-load.php</a>. So, the value of the <code>code</code> key should start with <code>"&lt;?php require_once('wordpress/wp-load.php'); REST_OF_YOUR_CODE"</code>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Enable <code>networking</code>: to access wp.org assets (themes, plugins, blocks, or patterns), or load a stylesheet using <a href="https://developer.wordpress.org/reference/functions/add_editor_style/">add_editor_style()</a> (say, when <a href="https://developer.wordpress.org/news/2023/02/creating-custom-block-styles-in-wordpress-themes">creating a custom block style</a>), you’d need to enable the <code>networking</code> option: <code>"features": {"networking": true}</code>.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Blueprints Builder</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can use an in-browser <a href="https://playground.wordpress.net/builder/builder.html">Blueprints editor</a> to build, validate, and preview your Blueprints in the browser.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::danger Caution</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The editor is under development and the embedded Playground sometimes fails to load. To get around it, refresh the page. We're aware of that, and are working to improve the experience.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Check for errors in the browser console</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If your Blueprint isn’t running as expected, open the browser developer tools to see if there are any errors.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To open the developer tools in Chrome, Firefox, Safari*, and Edge: press <code>Ctrl + Shift + I</code> on Windows/Linux or <code>Cmd + Option + I</code> on macOS.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::caution Warning</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you haven't yet, enable the Develop menu: go to <strong>Safari > Settings... > Advanced</strong> and check <strong>Show features for web developers</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>:::</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The developer tools window allows you to inspect network requests, view console logs, debug JavaScript, and examine the DOM and CSS styles applied to your webpage. This is crucial for diagnosing and fixing issues with Blueprints.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Ask for help</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The community is here to help! If you have questions or comments, <a href="https://github.com/adamziel/blueprints/issues">open a new issue</a> in this repository. Remember to include the following details:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>The Blueprint you’re trying to run.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The error message you’re seeing, if any.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The full output from the browser developer tools.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Any other relevant information that might help us understand the issue: OS, browser version, etc.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>52</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[05-blueprint-functions-in-api-client.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=53</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Blueprints Functions and the API Client</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Every Blueprint step you can declare in the JSON object also provides a handler function that can be used directly.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import { startPlaygroundWeb, login, installPlugin } from 'https://playground.wordpress.net/client/index.js';

const client = await startPlaygroundWeb({
	iframe: document.getElementById('wp'),
	remoteUrl: `https://playground.wordpress.net/remote.html`,
});
await client.isReady();

await login(client, {
	username: 'admin',
	password: 'password',
});

await installPlugin(client, {
	// Resources can only be used with JSON Blueprints.
	// If you use functions, you must provide the resolved
	// file.
	pluginZipFile: await fetch(pluginUrl),
});
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>For more information and live examples visit the <a href="../09-blueprints-api/05-steps.md">Blueprints Steps page</a>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>53</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title><![CDATA[14-browser-cross-process-communication.blockhtml]]></title>
  <link>http://127.0.0.1:9400/?page_id=54</link>
  <pubDate/>
  <dc:creator>admin</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Cross-process communication</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><code>@php-wasm/web</code> uses the <a href="https://github.com/GoogleChromeLabs/comlink">Comlink</a> library to turns the one-way <code>postMessage</code> available in JavaScript into a two-way communication channel.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If <code>postMessage</code> sounds unfamiliar, it's what JavaScript threads use to communicate. Please review the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage">MDN Docs</a> before continuing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By default, <code>postMessage</code> does not offer any request/response mechanics. You may send messages to another thread and you may independently receive messages from it, but you can't send a message and await a response to that specific message.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To quote the <a href="https://github.com/GoogleChromeLabs/comlink">Comlink</a> library documentation:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>main.js</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import * as Comlink from 'https://unpkg.com/comlink/dist/esm/comlink.mjs';
async function init() {
	const worker = new Worker('worker.js');
	// WebWorkers use `postMessage` and therefore work with Comlink.
	const obj = Comlink.wrap(worker);
	alert(`Counter: ${await obj.counter}`);
	await obj.inc();
	alert(`Counter: ${await obj.counter}`);
}
init();
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>worker.js</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>importScripts('https://unpkg.com/comlink/dist/umd/comlink.js');

const obj = {
	counter: 0,
	inc() {
		this.counter++;
	},
};

Comlink.expose(obj);
</code></pre>
<!-- /wp:code -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>54</wp:post_id>
  <wp:post_date>0000-00-00 00:00:00</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>0000-00-00 00:00:00</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
  </channel>
</rss>